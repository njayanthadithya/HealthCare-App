/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.LabAssistantRole;

import Business.BloodGroup.BloodGroup;
import Business.BloodGroup.Bloodgrouplist;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.LabOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.BloodReqToNewBloodBank;
import Business.WorkQueue.LabTestRequest;
import Business.WorkQueue.WorkRequest;
import static Logger.Logger.logger;
import java.awt.CardLayout;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author krish
 */
public class LabAssistantWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount useraccount;
    private LabOrganization labOrganization;
    private BloodGroup bloodgrp;
    private Bloodgrouplist bloodgrplist;
    private Enterprise enterprise;
    
    
    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public LabAssistantWorkAreaJPanel(JPanel userProcessContainer, UserAccount useraccount, Organization organization, Enterprise enterprise,EcoSystem business) {
        logger.log(Level.INFO, "LabAssistantWorkAreaJPanel");
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.useraccount = useraccount;
        this.business = business;
        this.labOrganization = (LabOrganization)organization;
        this.bloodgrp= bloodgrp;
        this.bloodgrplist=bloodgrplist;
        this.enterprise = enterprise;
        
        getatble();
    }
    
    public void getatble(){
        logger.log(Level.INFO, "getatble--LabAssistantWorkAreaJPanel");
        DefaultTableModel mod = (DefaultTableModel)workreqtable.getModel();
        
        mod.setRowCount(0);
        
        for(WorkRequest re : labOrganization.getWorkqueue().getWorkRequestAList()){
            Object[] row = new Object[4];
            row[0] = ((LabTestRequest)re);
            row[1] = re.getReceipient() == null ? null : re.getReceipient().getEmployeeUser().getEmployeeName();
            row[2] = ((LabTestRequest)re).getTaskStatus();
            row[3] = ((LabTestRequest)re).getBloodBagUnits();
            
            mod.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workreqtable = new javax.swing.JTable();
        assignbt = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        refbt = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workreqtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Message", "Receiver", "Status", "Total Units"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workreqtable);
        if (workreqtable.getColumnModel().getColumnCount() > 0) {
            workreqtable.getColumnModel().getColumn(0).setResizable(false);
            workreqtable.getColumnModel().getColumn(1).setResizable(false);
            workreqtable.getColumnModel().getColumn(2).setResizable(false);
            workreqtable.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 120, 490, 150));

        assignbt.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        assignbt.setText("Assign ");
        assignbt.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(110, 208, 202)));
        assignbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignbtActionPerformed(evt);
            }
        });
        add(assignbt, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 280, 100, 40));

        processJButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        processJButton.setText("Test Units");
        processJButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(110, 208, 202)));
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        add(processJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(531, 280, 100, 40));

        refbt.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        refbt.setText("Refresh");
        refbt.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(110, 208, 202)));
        refbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refbtActionPerformed(evt);
            }
        });
        add(refbt, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 80, 100, 30));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("LAB ASSISTANT WORK AREA ");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 20, 980, -1));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imaiges/medicare image 1.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        jLabel1.setMaximumSize(new java.awt.Dimension(1500, 1000));
        jLabel1.setMinimumSize(new java.awt.Dimension(1500, 1000));
        jLabel1.setPreferredSize(new java.awt.Dimension(1500, 1000));
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 930, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void assignbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignbtActionPerformed
        logger.log(Level.INFO, "assignbtActionPerformed--LabAssistantWorkAreaJPanel");
       int selectedRow = workreqtable.getSelectedRow();
        int rowCount = workreqtable.getSelectedRowCount();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (rowCount > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        WorkRequest workreq = (WorkRequest)workreqtable.getValueAt(selectedRow, 0);
        if (workreq.getTaskStatus().equals("In Progress")) {
            JOptionPane.showMessageDialog(null, "The request is already in process", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (workreq.getTaskStatus().equals("Completed")) {
            JOptionPane.showMessageDialog(null, "Request has been completed earlier", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if ((workreq).getTaskStatus().equals("Pending")) {
            (workreq).setReceipient(useraccount);
            (workreq).setTaskStatus(BloodReqToNewBloodBank.RequestINPROGRESS);

            getatble();
            JOptionPane.showMessageDialog(null, "The request is now assigned to you! Kindly process it");
        }

       

        
    }//GEN-LAST:event_assignbtActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
        
         logger.log(Level.INFO, "processJButtonActionPerformed--LabAssistantWorkAreaJPanel");
        int selectedRow = workreqtable.getSelectedRow();
        int rowCount = workreqtable.getSelectedRowCount();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (rowCount > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        
        LabTestRequest workreq = (LabTestRequest)workreqtable.getValueAt(selectedRow, 0);
        
        if (workreq.getTaskStatus().equals("Pending")) {
            JOptionPane.showMessageDialog(null, "The request has to be assigned first", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (workreq.getTaskStatus().equals("Completed")) {
            JOptionPane.showMessageDialog(null, "Request has been completed earlier", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if ((workreq).getTaskStatus().equals("In Progress")) {
        
        ProcessWorkRequestJPanel processworkreqpanel = new ProcessWorkRequestJPanel(userProcessContainer, workreq,bloodgrp,enterprise);
        userProcessContainer.add("processWorkRequestJPanel", processworkreqpanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        }
    }//GEN-LAST:event_processJButtonActionPerformed

    private void refbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refbtActionPerformed
        getatble();
    }//GEN-LAST:event_refbtActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignbt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refbt;
    private javax.swing.JTable workreqtable;
    // End of variables declaration//GEN-END:variables
}
