/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DoctorRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Location.Location;
import Business.Medicine.Medicine;
import Business.Medicine.MedAdministration;
import Business.Network.Network;
import Business.Organization.NurseOrganization;
import Business.Organization.Organization;
import Business.Patients.Patient;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.BloodReqToBloodBankfromHos;
import Business.WorkQueue.DischargeRequesttoNurse;
import Business.WorkQueue.CCarerequestToCCarefromHospital;
import Business.WorkQueue.WorkRequest;
import static Logger.Logger.logger;
import java.awt.CardLayout;
import java.time.LocalDateTime;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.AdministrativeRole.TransferRequestJpanel;

/**
 *
 * @author Lokesh Balaji
 */
public class appointmentpanel extends javax.swing.JPanel {

    /**
     * Creates new form appointmentJpanel
     */
    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private UserAccount useraccount;
    private EcoSystem ecosystem;

    public appointmentpanel(JPanel userProcessContainer, Enterprise enterprise, UserAccount useraccunt, EcoSystem ecosystem) {
       logger.log(Level.INFO, "appointmentpanel");
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.useraccount = useraccunt;
        this.ecosystem = ecosystem;
        
        gettable();
        getdischargereq();
        getbloodreq();
        getcombobox();
        gettranreq();
        getBB();
        getOB();
        getorganreq();
    }
    
   
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        patienttable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        patienttable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        patienttabe2 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        patienttable2 = new javax.swing.JTable();
        medicationbt = new javax.swing.JButton();
        allallergybt = new javax.swing.JButton();
        Transferbt = new javax.swing.JButton();
        transferHospitalcombo = new javax.swing.JComboBox<>();
        dischargebt = new javax.swing.JButton();
        bloodBanks = new javax.swing.JComboBox<>();
        reqbloodbt = new javax.swing.JButton();
        backbt = new javax.swing.JButton();
        reqOrganbtn = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        patienttable3 = new javax.swing.JTable();
        OrganBanks = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        patienttable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Patinet Name", "Patient HRN", "Locations"
            }
        ));
        jScrollPane1.setViewportView(patienttable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(82, 96, 361, 96));

        patienttable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Patient Name", "Status"
            }
        ));
        jScrollPane2.setViewportView(patienttable1);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(461, 96, -1, 96));

        patienttabe2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Patient", "Discharge Status"
            }
        ));
        jScrollPane3.setViewportView(patienttabe2);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(82, 334, 361, 99));

        patienttable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Patient", "Blood", "Units", "Status"
            }
        ));
        jScrollPane4.setViewportView(patienttable2);

        add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 330, -1, 100));

        medicationbt.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        medicationbt.setText("Medication");
        medicationbt.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(110, 208, 202)));
        medicationbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medicationbtActionPerformed(evt);
            }
        });
        add(medicationbt, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 230, 80, 29));

        allallergybt.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        allallergybt.setText("Add Allergy");
        allallergybt.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(110, 208, 202)));
        allallergybt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allallergybtActionPerformed(evt);
            }
        });
        add(allallergybt, new org.netbeans.lib.awtextra.AbsoluteConstraints(366, 228, 80, 29));

        Transferbt.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        Transferbt.setText("Transfer");
        Transferbt.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(110, 208, 202)));
        Transferbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransferbtActionPerformed(evt);
            }
        });
        add(Transferbt, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 230, 80, 29));

        transferHospitalcombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        add(transferHospitalcombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 230, 90, 30));

        dischargebt.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        dischargebt.setText("Discharge");
        dischargebt.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(110, 208, 202)));
        dischargebt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dischargebtActionPerformed(evt);
            }
        });
        add(dischargebt, new org.netbeans.lib.awtextra.AbsoluteConstraints(82, 460, 80, 29));

        bloodBanks.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        bloodBanks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bloodBanksActionPerformed(evt);
            }
        });
        add(bloodBanks, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 460, 90, 30));

        reqbloodbt.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        reqbloodbt.setText("Request Blood");
        reqbloodbt.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(110, 208, 202)));
        reqbloodbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reqbloodbtActionPerformed(evt);
            }
        });
        add(reqbloodbt, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 460, 100, 29));

        backbt.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        backbt.setText("Back");
        backbt.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(110, 208, 202)));
        backbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtActionPerformed(evt);
            }
        });
        add(backbt, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 720, 120, 29));

        reqOrganbtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        reqOrganbtn.setText("Request Organ");
        reqOrganbtn.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(110, 208, 202)));
        reqOrganbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reqOrganbtnActionPerformed(evt);
            }
        });
        add(reqOrganbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 650, 100, 29));

        patienttable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Patient", "Organ Type", "Units", "Status"
            }
        ));
        jScrollPane5.setViewportView(patienttable3);

        add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 530, -1, 100));

        OrganBanks.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        OrganBanks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrganBanksActionPerformed(evt);
            }
        });
        add(OrganBanks, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 650, 90, 30));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Doctor Appointment Panel");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 1030, -1));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imaiges/medicare image 1.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");
        jLabel2.setMaximumSize(new java.awt.Dimension(1500, 1000));
        jLabel2.setMinimumSize(new java.awt.Dimension(1500, 1000));
        jLabel2.setPreferredSize(new java.awt.Dimension(1500, 1000));
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 920, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void backbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbtActionPerformed
       logger.log(Level.INFO, "btnBackActionPerformed --appointmentpanel");

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backbtActionPerformed

    private void medicationbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medicationbtActionPerformed
       
         logger.log(Level.INFO, "medicationbtActionPerformed --appointmentpanel");

        int selectedRow = patienttable.getSelectedRow();
        if (selectedRow >= 0) {
            Patient patient = (Patient) patienttable.getValueAt(selectedRow, 0);
            prescribepanel prescribepanel = new prescribepanel(userProcessContainer, patient, enterprise);
            userProcessContainer.add("prescribeJPanel", prescribepanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        } else {
            JOptionPane.showMessageDialog(userProcessContainer, "Select a patient");
        }
    }//GEN-LAST:event_medicationbtActionPerformed

    private void allallergybtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allallergybtActionPerformed
         logger.log(Level.INFO, "allallergybtActionPerformed --appointmentpanel");

        int selectedRow = patienttable.getSelectedRow();
        if (selectedRow >= 0) {
            Patient patient = (Patient) patienttable.getValueAt(selectedRow, 0);
            allergypanel allergypanel = new allergypanel(userProcessContainer, patient);
            userProcessContainer.add("allergyJPanel", allergypanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        } else {
            JOptionPane.showMessageDialog(userProcessContainer, "Select a Patient");
        }
    }//GEN-LAST:event_allallergybtActionPerformed

    private void TransferbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TransferbtActionPerformed
       logger.log(Level.INFO, "TransferbtActionPerformed --appointmentpanel");

        if (transferHospitalcombo.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(userProcessContainer, "Select the hospital to transfer the patient");
            return;
        }

        int selectedRow = patienttable.getSelectedRow();
        if (selectedRow >= 0) {
            Patient patient = (Patient) patienttable.getValueAt(selectedRow, 0);
            for (Network net : ecosystem.getNetworkList()) {
                for (Enterprise enterprise : net.getEnterprisedirectory().getEnterpriselist()) {
                    if (enterprise.getEnterprisetype() == Enterprise.EnterpriseType.EmergencyCare) {
                        Business.WorkQueue.TransferRequest transfer = new Business.WorkQueue.TransferRequest();
                        Patient tranpat = new Patient();
                        tranpat.setAllergies(patient.getAllergies());
                        tranpat.setBloodGroup(patient.getBloodGroup());
                        tranpat.setDoctorName(null);
                        tranpat.setIsDischarged(false);

                        Location location = patient.getLocation();
                        location.setCount(location.getCount() - 1);

                        tranpat.setLocation(null);
                        tranpat.setMedList(patient.getMedList());
                        tranpat.setpName(patient.getpName());
                        this.enterprise.getPatientdirectory().getPatientAList().remove(patient);
                        transfer.setPatient(tranpat);

                        for (Network ncombo : ecosystem.getNetworkList()) {
                            for (Enterprise ecombo : ncombo.getEnterprisedirectory().getEnterpriselist()) {
                                if (ecombo.getEnterprisetype() == Enterprise.EnterpriseType.Hospital
                                        && ecombo.getOrganzationName().equals(transferHospitalcombo.getSelectedItem())) {
                                    transfer.setEnterprise(ecombo);
                                    break;
                                }
                            }
                        }
                        transfer.setSendEnterprise(this.enterprise);
                        transfer.setTaskStatus("0");
                        transfer.setTime(LocalDateTime.now());
                        enterprise.getWorkqueue().getWorkRequestAList().add(transfer);
                        useraccount.getWorkqueue().getWorkRequestAList().add(transfer);
                        JOptionPane.showMessageDialog(userProcessContainer, "Patient transfer Requested");
                        gettranreq();
                        gettable();
                        return;
                    }
                }
            }

        }
    }//GEN-LAST:event_TransferbtActionPerformed

    private void dischargebtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dischargebtActionPerformed
        logger.log(Level.INFO, "dischargebtActionPerformed --appointmentpanel");

        int selectedRow = patienttable.getSelectedRow();
        if (selectedRow >= 0) {
            Patient p = (Patient) patienttable.getValueAt(selectedRow, 0);
            for (Medicine m : p.getMedList().getMedAList()) {
                if (!m.isIsdiscontiued()) {
                    for (MedAdministration medAdmin : m.getMedicineadmin()) {
                        if (!medAdmin.getIsadmin()) {
                            JOptionPane.showMessageDialog(userProcessContainer, "Patient has medications which has not been administered."
                                    + "Please Administer before discharge");
                            return;
                        }
                    }
                }
            }

            DischargeRequesttoNurse request = new DischargeRequesttoNurse(p);
            request.setTaskStatus("0");
            Organization org = null;
            for (Organization organization : enterprise.getOrganizationdirectory().getOrganizationAList()) {
                if (organization instanceof NurseOrganization) {
                    org = organization;
                    break;
                }
            }
            if (org != null) {
                org.getWorkqueue().getWorkRequestAList().add(request);
                useraccount.getWorkqueue().getWorkRequestAList().add(request);
            }
            JOptionPane.showMessageDialog(userProcessContainer, "patient Discharge Requested to Nurse");


            gettable();
            getdischargereq();
            return;
        }
    }//GEN-LAST:event_dischargebtActionPerformed

    private void reqbloodbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reqbloodbtActionPerformed
     logger.log(Level.INFO, "reqbloodbtActionPerformed --appointmentpanel");

        if (bloodBanks.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(userProcessContainer, "Select the BloodBank to request the blood");
            return;
        }

        int selectedRow = patienttable.getSelectedRow();
        if (selectedRow >= 0) {
            Patient pat = (Patient) patienttable.getValueAt(selectedRow, 0);
            for (Network n : ecosystem.getNetworkList()) {
                for (Enterprise emp : n.getEnterprisedirectory().getEnterpriselist()) {
                    if (emp.getEnterprisetype() == Enterprise.EnterpriseType.BloodBank
                            && emp.getOrganzationName().equals(bloodBanks.getSelectedItem())) {
                        BloodReqToBloodBankfromHos reqtoBB = new BloodReqToBloodBankfromHos();
                        try {
                            int reqUnits = Integer.parseInt(JOptionPane.showInputDialog(userProcessContainer, "Req Units"));
                            if (reqUnits >= 5 || reqUnits <= 0) {
                                JOptionPane.showMessageDialog(userProcessContainer, "Enter a valid unit b/w 0-5 units");
                                return;
                            } else {
                                reqtoBB.setRequestedUnits(reqUnits);
                            }
                            reqtoBB.setTaskStatus("0");
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(userProcessContainer, "Enter a valid integer");
                            return;
                        }
                        reqtoBB.setPatient(pat);
                        reqtoBB.setSendingEnterprise(this.enterprise);
                        emp.getWorkqueue().getWorkRequestAList().add(reqtoBB);
                        useraccount.getWorkqueue().getWorkRequestAList().add(reqtoBB);
                        getbloodreq();
                        return;
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(userProcessContainer, "Select a patient");
        }

    }//GEN-LAST:event_reqbloodbtActionPerformed

    private void reqOrganbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reqOrganbtnActionPerformed
        // TODO add your handling code here:
        logger.log(Level.INFO, "reqOrganbtnActionPerformed --appointmentpanel");
            
            if (OrganBanks.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(userProcessContainer, "Select the OrganBank to request the Organs");
            return;
            }

            int selectedRow = patienttable.getSelectedRow();
            if (selectedRow >= 0) {
                
            Patient pat = (Patient) patienttable.getValueAt(selectedRow, 0);
            
            OrganreqPanel panel = new OrganreqPanel(userProcessContainer, pat, enterprise,ecosystem, useraccount);
            userProcessContainer.add("OrganreqPanel", panel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        } 
        else 
        {
            JOptionPane.showMessageDialog(userProcessContainer, "Select a patient");
        }
  
    }//GEN-LAST:event_reqOrganbtnActionPerformed

    private void bloodBanksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bloodBanksActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bloodBanksActionPerformed

    private void OrganBanksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrganBanksActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OrganBanksActionPerformed
    
    public void getBB() {
        logger.log(Level.INFO, "getBB --appointmentpanel");

        for (Network network : ecosystem.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterprisedirectory().getEnterpriselist()) {
                if (enterprise.getEnterprisetype() == Enterprise.EnterpriseType.BloodBank) {
                    bloodBanks.addItem(enterprise.getOrganzationName());
                }
            }
        }
    }
    
    public void getOB() {
        logger.log(Level.INFO, "getOB --appointmentpanel");

        for (Network network : ecosystem.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterprisedirectory().getEnterpriselist()) {
                if (enterprise.getEnterprisetype() == Enterprise.EnterpriseType.CovidCare) {
                    OrganBanks.addItem(enterprise.getOrganzationName());
                }
            }
        }
    }
    
     public void getcombobox() {
         logger.log(Level.INFO, "getcombobox --appointmentpanel");

        for (Network n : ecosystem.getNetworkList()) {
            for (Enterprise ent : n.getEnterprisedirectory().getEnterpriselist()) {
                if (!ent.getOrganzationName().equals(this.enterprise.getOrganzationName())
                        && ent.getEnterprisetype() == Enterprise.EnterpriseType.Hospital) {
                    transferHospitalcombo.addItem(ent.getOrganzationName());
                }
            }
        }
    }
     
      public void gettable() {
        logger.log(Level.INFO, "gettable --appointmentpanel");

        int flag = 0;
        DefaultTableModel mod = (DefaultTableModel) patienttable.getModel();
        mod.setRowCount(0);
        for (Patient patient : enterprise.getPatientdirectory().getPatientAList()) {
            if (patient.getDoctorName() != null) {
                if (patient.getDoctorName().getEmployeeName() == useraccount.getEmployeeUser().getEmployeeName()) {
                    if (!patient.isIsDischarged()) {
                        for (WorkRequest req : useraccount.getWorkqueue().getWorkRequestAList()) {
                            if (req.getClass().getName().contains("DischargeReqtoNurse")) {
                                if (((DischargeRequesttoNurse) req).getPatient().getPatientHRN().equals(patient.getPatientHRN())
                                        && req.getTaskStatus().equals("0")) {
                                    flag = 1;
                                    break;
                                }
                            }
                        }
                        if (flag == 0) {
                            Object[] row = new Object[3];
                            row[0] = patient;
                            row[1] = patient.getPatientHRN();
                            row[2] = patient.getLocation().getLocName();
                            mod.addRow(row);
                        }
                        flag = 0;
                    }
                }
            }
        }
    }
 public void getbloodreq() {
        logger.log(Level.INFO, "getbloodreq --appointmentpanel");

        DefaultTableModel mod = (DefaultTableModel) patienttable2.getModel();
        mod.setRowCount(0);
        for (WorkRequest workreq : useraccount.getWorkqueue().getWorkRequestAList()) {
            if (workreq.getClass().getName().contains("BloodrequestToBBfromHospital")) {
                Object[] row = new Object[4];
                row[0] = ((BloodReqToBloodBankfromHos) workreq).getPatient();
                row[1] = ((BloodReqToBloodBankfromHos) workreq).getPatient().getBloodGroup();
                row[2] = ((BloodReqToBloodBankfromHos) workreq).getRequestedUnits();
                if (workreq.getTaskStatus().equals("0")) {
                    row[3] = "Requested";
                } else if (workreq.getTaskStatus().equals("1")) {
                    row[3] = "In Progress";
                } else if (workreq.getTaskStatus().equals("2")) {
                    row[3] = "Decline";
                } else if (workreq.getTaskStatus().equals("3")) {
                    row[3] = "Completed";
                }
                mod.addRow(row);

            }
        }
    }
 
 //for organtype table
  public void getorganreq() {
       logger.log(Level.INFO, "getorganreq --appointmentpanel");

        DefaultTableModel mod = (DefaultTableModel) patienttable3.getModel();
        mod.setRowCount(0);
        for (WorkRequest workreq : useraccount.getWorkqueue().getWorkRequestAList()) {
            if (workreq.getClass().getName().contains("OrganrequestToOBfromHospital")) {
                Object[] row = new Object[4];
                row[0] = ((CCarerequestToCCarefromHospital) workreq).getPatient();
                row[1] = ((CCarerequestToCCarefromHospital) workreq).getCcareType();
                row[2] = ((CCarerequestToCCarefromHospital) workreq).getRequestedUnits();
                if (workreq.getTaskStatus().equals("0")) {
                    row[3] = "Requested";
                } else if (workreq.getTaskStatus().equals("1")) {
                    row[3] = "In Progress";
                } else if (workreq.getTaskStatus().equals("2")) {
                    row[3] = "Decline";
                } else if (workreq.getTaskStatus().equals("3")) {
                    row[3] = "Completed";
                }
                mod.addRow(row);

            }
        }
    }
 
 
 
 
 
//for transfer req table 
    public void gettranreq() {
        logger.log(Level.INFO, "gettranreq --appointmentpanel");

        DefaultTableModel md = (DefaultTableModel) patienttable1.getModel();
        md.setRowCount(0);

        for (WorkRequest wre : useraccount.getWorkqueue().getWorkRequestAList()) {
            if (wre.getClass().getName().contains("TransferRequest")) {
                Object[] row = new Object[3];
                 row[0] = ((Business.WorkQueue.TransferRequest) wre).getPatient();

                if (wre.getTaskStatus().equals("0")) {
                    row[1] = "Requested";
                } else if (wre.getTaskStatus().equals("1")) {
                    row[1] = "In Progress";
                } else if (wre.getTaskStatus().equals("3")) {
                    row[1] = "Ambulance";
                } else if (wre.getTaskStatus().equals("4")) {
                    row[1] = "Transferred";
                }
                md.addRow(row);
            }
        }
    }
    
    public void getdischargereq() {
        logger.log(Level.INFO, "getdischargereq --appointmentpanel");

        DefaultTableModel mod = (DefaultTableModel) patienttabe2.getModel();
        mod.setRowCount(0);
        for (WorkRequest req : useraccount.getWorkqueue().getWorkRequestAList()) {
            if (req.getClass().getName().contains("DischargeReqtoNurse")) {
                Object[] row = new Object[2];
                row[0] = ((DischargeRequesttoNurse) req).getpName();
                if (req.getTaskStatus().equals("0")) {
                    row[1] = "In process with nurse";
                } else if (req.getTaskStatus().equals("1")) {
                    row[1] = "Discharged";
                }
                mod.addRow(row);
            }

        }
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> OrganBanks;
    private javax.swing.JButton Transferbt;
    private javax.swing.JButton allallergybt;
    private javax.swing.JButton backbt;
    private javax.swing.JComboBox<String> bloodBanks;
    private javax.swing.JButton dischargebt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton medicationbt;
    private javax.swing.JTable patienttabe2;
    private javax.swing.JTable patienttable;
    private javax.swing.JTable patienttable1;
    private javax.swing.JTable patienttable2;
    private javax.swing.JTable patienttable3;
    private javax.swing.JButton reqOrganbtn;
    private javax.swing.JButton reqbloodbt;
    private javax.swing.JComboBox<String> transferHospitalcombo;
    // End of variables declaration//GEN-END:variables
}
