/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.BloodBank;

import Business.BloodGroup.BloodGroup;
import Business.BloodGroup.Bloodgrouplist;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.PhysicianOrganization;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.BloodReqToNewBloodBank;
import Business.WorkQueue.BloodReqToBloodBankfromEmg;
import Business.WorkQueue.WorkQueue;
import Business.WorkQueue.WorkRequest;
import static Logger.Logger.logger;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lokesh Balaji
 */
public class Emergencyreqpanel extends javax.swing.JPanel {

    /**
     * Creates new form HospitalReqJPanel
     */
    private JPanel userProcessContainer;
    private PhysicianOrganization organization;
    private Enterprise enterprise;
    private UserAccount useraccount;
    private BloodGroup bloodgrp;
    private Bloodgrouplist bloodgrplist;
    private EcoSystem ecosystem;
    private Network network;
    private Enterprise.EnterpriseType enterprisetype;
    private OrganizationDirectory organizationdirectory;

    public Emergencyreqpanel(JPanel userProcessContainer, BloodGroup bloodgrp, Bloodgrouplist bloodgrplist, Enterprise enterprise, UserAccount useraccount, EcoSystem ecosystem) {
        logger.log(Level.INFO, "Emergencyreqpanel");

        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.bloodgrp = bloodgrp;
        this.bloodgrplist = bloodgrplist;
        this.network = network;
        this.ecosystem = ecosystem;
        this.useraccount = useraccount;
        this.enterprise = enterprise;
        this.enterprisetype = enterprisetype;
        this.organization = organization;
        this.organizationdirectory = organizationdirectory;

        getbloodreqtable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        emergencyreqtable = new javax.swing.JTable();
        assignbt = new javax.swing.JButton();
        acceptbt = new javax.swing.JButton();
        backbt = new javax.swing.JButton();
        manageEnt1 = new javax.swing.JLabel();
        manageEnt2 = new javax.swing.JLabel();
        declinebtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        emergencyreqtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "BLOOD GROUP", "NO OF UNITS", "REQUEST STATUS", "ASSIGNED TO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(emergencyreqtable);
        if (emergencyreqtable.getColumnModel().getColumnCount() > 0) {
            emergencyreqtable.getColumnModel().getColumn(0).setResizable(false);
            emergencyreqtable.getColumnModel().getColumn(1).setResizable(false);
            emergencyreqtable.getColumnModel().getColumn(2).setResizable(false);
            emergencyreqtable.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 180, 659, 143));

        assignbt.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        assignbt.setText("Assign ");
        assignbt.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(110, 208, 202)));
        assignbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignbtActionPerformed(evt);
            }
        });
        add(assignbt, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 340, 80, 29));

        acceptbt.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        acceptbt.setText("Accept");
        acceptbt.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(110, 208, 202)));
        acceptbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptbtActionPerformed(evt);
            }
        });
        add(acceptbt, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 340, 80, 29));

        backbt.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        backbt.setText("Back");
        backbt.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(110, 208, 202)));
        backbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtActionPerformed(evt);
            }
        });
        add(backbt, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 340, 80, 29));

        manageEnt1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        manageEnt1.setText("EMS Requests:");
        add(manageEnt1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 140, 250, -1));

        manageEnt2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        manageEnt2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        manageEnt2.setText("Blood Bank Emergency Request Area");
        add(manageEnt2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 900, 30));

        declinebtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        declinebtn.setText("Decline");
        declinebtn.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(110, 208, 202)));
        declinebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                declinebtnActionPerformed(evt);
            }
        });
        add(declinebtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 340, 80, 29));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imaiges/medicare image 1.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        jLabel1.setMaximumSize(new java.awt.Dimension(1500, 1000));
        jLabel1.setMinimumSize(new java.awt.Dimension(1500, 1000));
        jLabel1.setPreferredSize(new java.awt.Dimension(1500, 1000));
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 890, 960));
    }// </editor-fold>//GEN-END:initComponents

    private void getbloodreqtable() {
        logger.log(Level.INFO, "getbloodreqtable --Emergencyreqpanel");

        DefaultTableModel model = (DefaultTableModel) emergencyreqtable.getModel();

        model.setRowCount(0);

        for (WorkRequest wr : enterprise.getWorkqueue().getWorkRequestAList()) {
            if (wr.getClass().getName().contains("BloodrequestToBBfromEMS")) {
                Object[] row = new Object[4];
                row[0] = ((BloodReqToBloodBankfromEmg) wr);
                row[1] = ((BloodReqToBloodBankfromEmg) wr).getRequestedUnits();
                row[2] = wr.getTaskStatus();
                try {
                    row[3] = wr.getReceipient().getEmployeeUser().getEmployeeName();
                } catch (NullPointerException e) {

                    row[3] = "No Assignee yet";
                }
                
                model.addRow(row);
            }
        }

    }

    private void assignbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignbtActionPerformed
        logger.log(Level.INFO, "assignbtActionPerformed --Emergencyreqpanel");

        int selectedRow = emergencyreqtable.getSelectedRow();
        int rowCount = emergencyreqtable.getSelectedRowCount();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a request", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (rowCount > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one request", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        WorkRequest wq = (WorkRequest) emergencyreqtable.getValueAt(selectedRow, 0);
        //        if(wq.getReceiver()!=null){
        //        JOptionPane.showMessageDialog(null, "Request has been processed earlier","warning",JOptionPane.WARNING_MESSAGE);
        //        return;
        //        }

        if (wq.getTaskStatus().equals("In Progress")) {
            JOptionPane.showMessageDialog(null, "The request is already in process", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (wq.getTaskStatus().equals("Completed") || wq.getTaskStatus().equals("Declined")) {
            JOptionPane.showMessageDialog(null, "Request has been completed earlier", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if ((wq).getTaskStatus().equals("Pending")) {
            (wq).setReceipient(useraccount);
            (wq).setTaskStatus(BloodReqToBloodBankfromEmg.RequestINPROGRESS);
            getbloodreqtable();
            JOptionPane.showMessageDialog(null, "The request is now assigned to you! Kindly process it");
        }

    }//GEN-LAST:event_assignbtActionPerformed

    private void acceptbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptbtActionPerformed
        // TODO add your handling code here:
        logger.log(Level.INFO, "btnAcceptActionPerformed --Emergencyreqpanel");

        int selectedRow = emergencyreqtable.getSelectedRow();
        int rowCount = emergencyreqtable.getSelectedRowCount();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a request", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (rowCount > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one request", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (rowCount == 1) {
            WorkRequest wq = (WorkRequest) emergencyreqtable.getValueAt(selectedRow, 0);

            if (wq.getTaskStatus().equals("Pending")) {
                JOptionPane.showMessageDialog(null, "The request has to be assigned first");
            } else if (wq.getTaskStatus().equals("Completed") || wq.getTaskStatus().equals("Declined")) {
                JOptionPane.showMessageDialog(null, "The request has been processed earlier");
            } else {
                String reqbloodgroup = ((BloodReqToBloodBankfromEmg) wq).getBloodGroup();
                for (BloodGroup bg : this.bloodgrplist.getBloodGroupAList()) {
                    if (bg.getBloodGroup().equals(reqbloodgroup)) {
                        int AvailableUnits = Integer.parseInt(bg.getAvailUnits());
                    }
                }
                int BorrowedUnits = Integer.parseInt(((BloodReqToBloodBankfromEmg) wq).getRequestedUnits());
                for (BloodGroup bg : this.bloodgrplist.getBloodGroupAList()) {
                    if (bg.getBloodGroup().equals(reqbloodgroup)) {
                        if (Integer.parseInt(bg.getAvailUnits()) > BorrowedUnits) {
                            bg.setAvailUnits(String.valueOf((Integer.parseInt(bg.getAvailUnits()) - BorrowedUnits)));
                            JOptionPane.showMessageDialog(null, "Request has been accepted");
                            wq.setTaskStatus(BloodReqToBloodBankfromEmg.RequestCOMPLETE);
                            getbloodreqtable();
                            break;
                        } else {
                            JOptionPane.showMessageDialog(null, "Available Blood Units are lesser than the requested units, Please Decline the Request");
                        }
                    }
                }
            }
        }

    }//GEN-LAST:event_acceptbtActionPerformed

    private void backbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbtActionPerformed
        logger.log(Level.INFO, "backbtActionPerformed --Emergencyreqpanel");
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        Clinicianworkareapanel dwjp = (Clinicianworkareapanel) component;
        dwjp.gettable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);

    }//GEN-LAST:event_backbtActionPerformed

    private void declinebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_declinebtnActionPerformed
        // TODO add your handling code here:
             
        logger.log(Level.INFO, "declinebtnActionPerformed --Emergencyreqpanel");
        int selectedRow = emergencyreqtable.getSelectedRow();
        int rowCount = emergencyreqtable.getSelectedRowCount();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a request", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (rowCount > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one request", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (rowCount == 1) {
            WorkRequest wq = (WorkRequest) emergencyreqtable.getValueAt(selectedRow, 0);

            if (wq.getTaskStatus().equals("Pending")) {
                JOptionPane.showMessageDialog(null, "The request has to be assigned first");
            } else if (wq.getTaskStatus().equals("Completed") || wq.getTaskStatus().equals("Declined")) {
                JOptionPane.showMessageDialog(null, "The request has been processed earlier");
            } else {
                    wq.setTaskStatus(BloodReqToBloodBankfromEmg.RequestREJECT);
                    System.out.println("in else decline"+wq.getTaskStatus());
                    JOptionPane.showMessageDialog(null, "Request has been Declined");
                    
                    getbloodreqtable();
                    
                    
            }
        }
    }//GEN-LAST:event_declinebtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptbt;
    private javax.swing.JButton assignbt;
    private javax.swing.JButton backbt;
    private javax.swing.JButton declinebtn;
    private javax.swing.JTable emergencyreqtable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel manageEnt1;
    private javax.swing.JLabel manageEnt2;
    // End of variables declaration//GEN-END:variables
}
