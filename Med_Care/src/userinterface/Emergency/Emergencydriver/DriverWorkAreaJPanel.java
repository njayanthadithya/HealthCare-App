/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Emergency.Emergencydriver;

import Business.EmgPatient.EmgPatient;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.DoctorOrganization;
import Business.Organization.ECareManagerOganization;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.UserAccount.UserAccount;
import Business.Ambulance.Ambulance;
import Business.Ambulance.Ambulancedirectory;
import Business.WorkQueue.MessageNurseToHosRequest;
import Business.WorkQueue.TransportRequest;
import Business.WorkQueue.WorkQueue;
import Business.WorkQueue.WorkRequest;
import static Logger.Logger.logger;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.time.LocalDateTime;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.Emergency.Emergencymanager.ScheduleEmergencyServiceJPanel;

/**
 *
 * @author krish
 */
public class DriverWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DriverWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private Organization organization;
    private Enterprise enterprise;
    private UserAccount useraccount;
    private OrganizationDirectory organizationdirectory;
    private Ambulancedirectory ambulancedirectory;
    private Ambulance ambulance;
    private EcoSystem ecosystem;
    private EmgPatient emergencypatient;
    private Network network;

    public DriverWorkAreaJPanel(JPanel userProcessContainer, UserAccount useraccount, Organization organization, Enterprise enterprise, EcoSystem ecosystem) {
        logger.log(Level.INFO, "DriverWorkAreaJPanel");

        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.useraccount = useraccount;
        this.organization = organization;
        this.organizationdirectory = enterprise.getOrganizationdirectory();
        this.enterprise = enterprise;
        this.ambulancedirectory = enterprise.getAmbulancelist();
        this.ecosystem = ecosystem;
        this.network = network;
        valuelb.setText(enterprise.getOrganzationName());
        gettable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        manageEnt = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        vehicletable = new javax.swing.JTable();
        assignbt = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        completebt = new javax.swing.JButton();
        valuelb = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        manageEnt.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        manageEnt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        manageEnt.setText("DRIVER REQUESTS AREA");
        add(manageEnt, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 980, -1));

        vehicletable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "ContactNo", "Source", "Destination", "VehicleNo", "Request DateTime", "Raised by", "Assigned to", "Status"
            }
        ));
        jScrollPane1.setViewportView(vehicletable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 970, 185));

        assignbt.setFont(new java.awt.Font("Times New Roman", 1, 13)); // NOI18N
        assignbt.setText("Assign");
        assignbt.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 255, 255), new java.awt.Color(110, 208, 202)));
        assignbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignbtActionPerformed(evt);
            }
        });
        add(assignbt, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 130, 40));

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 80, 120, 40));

        completebt.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N
        completebt.setText("Complete");
        completebt.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(110, 208, 202)));
        completebt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completebtActionPerformed(evt);
            }
        });
        add(completebt, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 330, 130, 40));

        valuelb.setBackground(new java.awt.Color(0, 0, 0));
        valuelb.setFont(new java.awt.Font("Times New Roman", 1, 13)); // NOI18N
        add(valuelb, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 50, -1, -1));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imaiges/medicare image 1.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        jLabel1.setMaximumSize(new java.awt.Dimension(1500, 1000));
        jLabel1.setMinimumSize(new java.awt.Dimension(1500, 1000));
        jLabel1.setPreferredSize(new java.awt.Dimension(1500, 1000));
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1060, 930));
    }// </editor-fold>//GEN-END:initComponents


    private void gettable() {
        logger.log(Level.INFO, "gettable --DriverWorkAreaJPanel");

        DefaultTableModel mod = (DefaultTableModel) vehicletable.getModel();
        mod.setRowCount(0);

        if (!organization.getWorkqueue().getWorkRequestAList().isEmpty()) {
            for (WorkRequest wr : organization.getWorkqueue().getWorkRequestAList()) {
                if (wr.getClass().getName().contains("TransportWorkRequest")) {

                    Object row[] = new Object[9];
                    row[0] = ((TransportRequest) wr);
                    row[1] = ((TransportRequest) wr).getEmgPatient().getContactNo();
                    row[2] = ((TransportRequest) wr).getEmgPatient().getPickUpLocation();
                    row[3] = ((TransportRequest) wr).getEmgPatient().getDropOffLocation();
                    row[4] = ((TransportRequest) wr).getAmbulance().getAmbulanceNo();
                    row[5] = ((TransportRequest) wr).getTime();
                    row[6] = ((TransportRequest) wr).getIssuer().getEmployeeUser().getEmployeeName();
                    try {
                        row[7] = ((TransportRequest) wr).getReceipient().getEmployeeUser().getEmployeeName();
                    } catch (NullPointerException e) {
                        row[7] = "No assignee yet";
                    }
                    row[8] = ((TransportRequest) wr).getTaskStatus();
                    mod.addRow(row);
                }
            }
        }
    }

    private void assignbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignbtActionPerformed
        logger.log(Level.INFO, "assignbtActionPerformed --DriverWorkAreaJPanel");

        int selectedRow = vehicletable.getSelectedRow();
        int rowCount = vehicletable.getSelectedRowCount();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (rowCount > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        WorkRequest workreq = (WorkRequest) vehicletable.getValueAt(selectedRow, 0);

        if (workreq.getTaskStatus().equals("Completed")) {
            JOptionPane.showMessageDialog(null, "Request has been processed earlier", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (workreq.getReceipient() != null) {
            JOptionPane.showMessageDialog(null, "Request has been processed earlier!", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        for (WorkRequest wr : organization.getWorkqueue().getWorkRequestAList()) {
            if (wr.getClass().getName().contains("TransportWorkRequest")) {
                if (!wr.getTaskStatus().isEmpty() && wr.getTaskStatus().equals("In Progress") && wr.getReceipient().equals(useraccount)) {
                    JOptionPane.showMessageDialog(null, "please complete earlier task", "warning", JOptionPane.WARNING_MESSAGE);
                    return;
                }

            }
        }

        if (workreq.getTaskStatus().equals("Pending")) {
            workreq.setReceipient(useraccount);
            workreq.setTaskStatus(TransportRequest.RequestINPROCESS);
            workreq.setTime(LocalDateTime.now());
            gettable();
            JOptionPane.showMessageDialog(null, "The request is now assigned to you! Kindly process it");
        }

    }//GEN-LAST:event_assignbtActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        logger.log(Level.INFO, "refreshJButtonActionPerformed --DriverWorkAreaJPanel");

        gettable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void completebtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completebtActionPerformed
        // TODO add your handling code here:
        logger.log(Level.INFO, "completebtActionPerformed --DriverWorkAreaJPanel");

        int selectedRow = vehicletable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int rowCount = vehicletable.getSelectedRowCount();
        if (rowCount > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        TransportRequest trans = (TransportRequest) vehicletable.getValueAt(selectedRow, 0);
        //if(trans.getReceiver()==null)

        if (trans.getTaskStatus().equalsIgnoreCase("Completed") && !trans.getReceipient().equals(useraccount)) {
            JOptionPane.showMessageDialog(null, "Request has been processed earlier", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (trans.getReceipient() == null) {
            JOptionPane.showMessageDialog(null, "Please assign the request first", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (trans.getTaskStatus().equalsIgnoreCase("In Progress") || trans.getTaskStatus().equalsIgnoreCase("Pending")) {
            if (trans.getReceipient() != useraccount) {
                JOptionPane.showMessageDialog(null, "Request has been processed earlier!", "warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        if (trans.getTaskStatus().equals("Pending")) {
            JOptionPane.showMessageDialog(null, "Please assign and process the request", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        trans.setTaskStatus(TransportRequest.RequestCOMPLETED);
        trans.setTime(LocalDateTime.now());
        trans.setReceipient(useraccount);
        trans.setMessage("Patient has been brought to the Hospital");
        trans.getAmbulance().setAvailability(true);
        gettable();
        JOptionPane.showMessageDialog(null, "Thank you!");

        for (Network n : ecosystem.getNetworkList()) {
            for (Enterprise e : n.getEnterprisedirectory().getEnterpriselist()) {
                if (e.getEnterprisetype() == Enterprise.EnterpriseType.Hospital && (trans.getRecieveEnterprise() == e)) {
                    e.getWorkqueue().getWorkRequestAList().add(trans);
                    break;

                }
            }
        }
    }//GEN-LAST:event_completebtActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignbt;
    private javax.swing.JButton completebt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel manageEnt;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JLabel valuelb;
    private javax.swing.JTable vehicletable;
    // End of variables declaration//GEN-END:variables
}
