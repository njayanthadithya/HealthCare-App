/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.AdministrativeRole;

import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Location.Location;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.Patients.Patient;
import Business.Roles.Role;
import Business.UserAccount.Useraccount;
import Business.UserAccount.Useraccountdirectory;
import static Logger.Logger.logger;
//import Mail.SendMail;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
//import javax.mail.MessagingException;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author monishmm
 */
public class Createappointmentpanel extends javax.swing.JPanel {

    private Enterprise enterprise;
    private JPanel userProcessContainer;

    /**
     * Creates new form CreateAppointmentJPanel
     */
    public Createappointmentpanel(JPanel userProcessContainer, Enterprise enterprise) {
        logger.log(Level.INFO, "CreateAppointmentJPanel");

        initComponents();
        this.enterprise = enterprise;
        this.userProcessContainer = userProcessContainer;
        getComboBox();
    }

    public void getComboBox() {
        logger.log(Level.INFO, "populateComboBox --CreateAppointmentJPanel");

        OrganizationDirectory orgdir = enterprise.getOrganizationdirectory();

        for (Organization org : orgdir.getOrglist()) {
            if (org.getName().equals("Doctor Organization")) {
                for (Employee u : org.getEmployeedirectory().getEmployeelist()) {
                    doctorcombo.addItem(u.toString());
                }
            }
        }
        for (Location location : enterprise.getLocationlist().getLocationlist()) {
            locationcombo.addItem(location.getLocationname());
        }

    }

    public void gettable(String search) {
        logger.log(Level.INFO, "populateTable --CreateAppointmentJPanel");

        DefaultTableModel appointmodel = (DefaultTableModel) appointmenttable.getModel();
        appointmodel.setRowCount(0);
        for (Patient patient : enterprise.getPatientdirectory().getPatientList()) {
            if (patient.getPatientName().startsWith(search)) {
                Object row[] = new Object[2];
                row[0] = patient;
                row[1] = patient.getPatientHRN();
                appointmodel.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        admitbt = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        appointmenttable = new javax.swing.JTable();
        backbt = new javax.swing.JButton();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        txtSearch = new javax.swing.JTextField();
        lblPatient = new javax.swing.JLabel();
        lblDoctor = new javax.swing.JLabel();
        doctorcombo = new javax.swing.JComboBox<>();
        searchbt = new javax.swing.JButton();
        locationcombo = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        admitbt.setText("Admit");
        admitbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                admitbtActionPerformed(evt);
            }
        });
        add(admitbt, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 20, -1, -1));

        appointmenttable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "HRN"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(appointmenttable);
        if (appointmenttable.getColumnModel().getColumnCount() > 0) {
            appointmenttable.getColumnModel().getColumn(0).setResizable(false);
            appointmenttable.getColumnModel().getColumn(1).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 330, 600, 180));

        backbt.setText("Back");
        backbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtActionPerformed(evt);
            }
        });
        add(backbt, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 16, -1, -1));

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblPatient.setText("Patient Name");

        lblDoctor.setText("Doctor");

        doctorcombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Doctor" }));

        searchbt.setText("Search");
        searchbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchbtActionPerformed(evt);
            }
        });

        locationcombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Location" }));

        jLabel1.setText("Location");

        jLayeredPane1.setLayer(txtSearch, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(lblPatient, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(lblDoctor, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(doctorcombo, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(searchbt, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(locationcombo, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDoctor)
                    .addComponent(jLabel1))
                .addGap(39, 39, 39)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(doctorcombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(locationcombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(70, 70, 70))
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblPatient)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchbt)
                .addGap(25, 25, 25))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addGap(0, 9, Short.MAX_VALUE)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPatient)
                    .addComponent(searchbt))
                .addGap(29, 29, 29)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDoctor)
                    .addComponent(doctorcombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(locationcombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40))
        );

        add(jLayeredPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 100, 380, 170));
    }// </editor-fold>//GEN-END:initComponents

    private void admitbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_admitbtActionPerformed
        // TODO add your handling code here:
        logger.log(Level.INFO, "bookAppointmentActionPerformed --CreateAppointmentJPanel");

        if (doctorcombo.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(userProcessContainer, "Select a Doctor");
            return;
        }
        if (locationcombo.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(userProcessContainer, "Select a Location");
            return;
        }

        int selectedRow = appointmenttable.getSelectedRow();
        if (selectedRow >= 0) {
            Patient patient = (Patient) appointmenttable.getValueAt(selectedRow, 0);
            if (patient.getDoctor() != null) {
                JOptionPane.showMessageDialog(userProcessContainer, "Patient is already admitted and assigned to " + patient.getDoctor().getEmpname());
                return;
            }
            String emp = doctorcombo.getSelectedItem().toString();
            ArrayList<Organization> org = enterprise.getOrganizationdirectory().getOrglist();
            for (Organization o : org) {
             if (o.getName().equals("Doctor Organization")) {
             for (Employee employee : o.getEmployeedirectory().getEmployeelist()) {
             if (employee.getEmpname().equals(emp)) {
                String locs = locationcombo.getSelectedItem().toString();
                    for (Location location : enterprise.getLocationlist().getLocationlist()) {
                        if (location.getLocationname().equals(locs)) {
                           if (location.getNurselist().size() == 0) {
                                 JOptionPane.showMessageDialog(userProcessContainer, "Currently nurse is not available in this location");
                                 return;
                                  }
                                    if (location.getMaximum() >= (location.getCount() + 1)) {
                                        patient.setDoctor(employee);
                                        patient.setLocation(location);
                                        location.setCount(location.getCount() + 1);
                                        patient.setIsDischarged(false);
                                        JOptionPane.showMessageDialog(userProcessContainer, "Patient Admitted");
//                                        
                                        return;
                                    } else {
                                        JOptionPane.showMessageDialog(userProcessContainer, location.getLocationname()
                                                + " is already full");
                                        return;
                                    }

                                }
                            }
                        }
                    }
                }
            }

        } else {
            JOptionPane.showMessageDialog(userProcessContainer, "Please choose a patient");
            return;
        }
    }//GEN-LAST:event_admitbtActionPerformed

    private void searchbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchbtActionPerformed
        // TODO add your handling code here:
        logger.log(Level.INFO, "jButton1ActionPerformed --CreateAppointmentJPanel");

        this.gettable(txtSearch.getText());
    }//GEN-LAST:event_searchbtActionPerformed

    private void backbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbtActionPerformed
        // TODO add your handling code here:
        logger.log(Level.INFO, "BackJButtonActionPerformed --CreateAppointmentJPanel");

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backbtActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton admitbt;
    private javax.swing.JTable appointmenttable;
    private javax.swing.JButton backbt;
    private javax.swing.JComboBox<String> doctorcombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDoctor;
    private javax.swing.JLabel lblPatient;
    private javax.swing.JComboBox<String> locationcombo;
    private javax.swing.JButton searchbt;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
