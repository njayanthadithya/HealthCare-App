/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Bloodbank;

import Business.Blood.Bloodgroup;
import Business.Blood.Bloodgrouplist;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Clinicianorganization;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.UserAccount.Useraccount;
import Business.WorkQueue.BloodReqToNewBB;
import Business.WorkQueue.WorkRequest;
import static Logger.Logger.logger;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lokesh Balaji
 */
public class Clinicianworkreqpanel extends javax.swing.JPanel {

    /**
     * Creates new form Clinicianworkreqpanel
     */
    private JPanel userProcessContainer;
    private Clinicianorganization organization;
    private Enterprise enterprise;
    private Useraccount useraccount;
    private Bloodgroup bloodgrp;
    private Bloodgrouplist bloodgrplist;
    private EcoSystem ecosystem;
    private Network network;
    private Enterprise.EnterpriseType enterprisetype;
    private OrganizationDirectory organizationdirectory;

    public Clinicianworkreqpanel(JPanel userProcessContainer, Bloodgroup bloodgrp, Bloodgrouplist bloodgrplist, Enterprise enterprise, Useraccount useraccount, EcoSystem ecosystem) {
        logger.log(Level.INFO, "ClinicianWorkReq");

        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.bloodgrp = bloodgrp;
        this.bloodgrplist = bloodgrplist;
        this.network = network;
        this.ecosystem = ecosystem;
        this.useraccount = useraccount;
        this.enterprise = enterprise;
        this.enterprisetype = enterprisetype;
        this.organization = organization;
        this.organizationdirectory = organizationdirectory;

        getbloodreqtable();
        getreqitemstable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        manageEnt1 = new javax.swing.JLabel();
        manageEnt = new javax.swing.JLabel();
        assignbt = new javax.swing.JButton();
        backbt = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        bloodrequesttable = new javax.swing.JTable();
        acceptbt = new javax.swing.JButton();
        declinebt = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        reqtable = new javax.swing.JTable();
        manageEnt2 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        manageEnt1.setFont(new java.awt.Font("Tamil MN", 1, 18)); // NOI18N
        manageEnt1.setText("CLINICIAN REQUEST AREA");
        add(manageEnt1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 20, 250, -1));

        manageEnt.setFont(new java.awt.Font("Tamil MN", 1, 18)); // NOI18N
        manageEnt.setText("Blood Requests");
        add(manageEnt, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 80, 140, -1));

        assignbt.setText("Assign to me");
        assignbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignbtActionPerformed(evt);
            }
        });
        add(assignbt, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 270, -1, -1));

        backbt.setText("Back");
        backbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtActionPerformed(evt);
            }
        });
        add(backbt, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        bloodrequesttable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Blood Group", "Requestor", "No of Units", "Request Status", "Assigned To"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(bloodrequesttable);
        if (bloodrequesttable.getColumnModel().getColumnCount() > 0) {
            bloodrequesttable.getColumnModel().getColumn(0).setResizable(false);
            bloodrequesttable.getColumnModel().getColumn(1).setResizable(false);
            bloodrequesttable.getColumnModel().getColumn(2).setResizable(false);
            bloodrequesttable.getColumnModel().getColumn(3).setResizable(false);
            bloodrequesttable.getColumnModel().getColumn(4).setResizable(false);
        }

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 120, 659, 143));

        acceptbt.setText("Accept");
        acceptbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptbtActionPerformed(evt);
            }
        });
        add(acceptbt, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 270, -1, -1));

        declinebt.setText("Decline");
        declinebt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                declinebtActionPerformed(evt);
            }
        });
        add(declinebt, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 270, -1, -1));

        reqtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Blood Group", "Requestor", "No of Units", "Request Status", "Assigned To"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(reqtable);
        if (reqtable.getColumnModel().getColumnCount() > 0) {
            reqtable.getColumnModel().getColumn(0).setResizable(false);
            reqtable.getColumnModel().getColumn(1).setResizable(false);
            reqtable.getColumnModel().getColumn(2).setResizable(false);
            reqtable.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 360, 659, 143));

        manageEnt2.setFont(new java.awt.Font("Tamil MN", 1, 18)); // NOI18N
        manageEnt2.setText("Requested Items");
        add(manageEnt2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 320, 196, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void getbloodreqtable() {
        logger.log(Level.INFO, "populateBloodReqTable --ClinicianWorkReq");

        DefaultTableModel mod = (DefaultTableModel) bloodrequesttable.getModel();

        mod.setRowCount(0);

        for (Network net : ecosystem.getNetworkList()) {
        for (Enterprise enterprise : net.getEnterprisedirectory().getEnterpriselist()) {
        if (enterprise.getEnterprisetype() == Enterprise.EnterpriseType.BloodBank && enterprise.getName().equals(this.enterprise.getName())) {
       for (Organization organization : enterprise.getOrganizationdirectory().getOrglist()) {
        for (WorkRequest req : organization.getWorkqueue().getWorkrequestlist()) {
        if(req.getClass().getName().contains("BloodReqToNewBB")){
          Object[] row = new Object[5];
          row[0] = ((BloodReqToNewBB) req);
          row[1] = req.getSender().getEmpuser().getEmpname();
          row[2] = ((BloodReqToNewBB) req).getReqUnits();
          row[3] = req.getStatus();
            try {
                row[4] = req.getReceiver().getEmpuser().getEmpname();
               } catch (NullPointerException e) {

                   row[4] = "No Assignee yet";
                     }
                mod.addRow(row);
                 }
                }
                    }
                }
            }
        }
    }

    private void getreqitemstable() {
        logger.log(Level.INFO, "populatereqItemsTable --ClinicianWorkReq");

        DefaultTableModel mod = (DefaultTableModel) reqtable.getModel();

        mod.setRowCount(0);

        for (WorkRequest ua : this.useraccount.getWorkqueue().getWorkrequestlist()) {
            if(ua.getClass().getName().contains("BloodReqToNewBB")){
            Object[] row = new Object[5];
            row[0] = ((BloodReqToNewBB) ua);
            row[1] = ua.getSender().getEmpuser().getEmpname();
            row[2] = ((BloodReqToNewBB) ua).getReqUnits();
            row[3] = ua.getStatus();
            try {
                row[4] = ua.getReceiver().getEmpuser().getEmpname();
            } catch (NullPointerException e) {
                row[4] = "No Assignee Yet";
            }
            mod.addRow(row);
        }
        }

        getbloodreqtable();

    }

    private void assignbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignbtActionPerformed

        logger.log(Level.INFO, "assignJButtonActionPerformed --ClinicianWorkReq");

        int selectedRow = bloodrequesttable.getSelectedRow();
        int rowCount = bloodrequesttable.getSelectedRowCount();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (rowCount > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        WorkRequest workreq = (WorkRequest) bloodrequesttable.getValueAt(selectedRow, 0);
//        if(workreq.getReceiver()!=null){
//        JOptionPane.showMessageDialog(null, "Request has been processed earlier","warning",JOptionPane.WARNING_MESSAGE);
//        return;
//        }

        if (workreq.getStatus().equals("In Progress")) {
            JOptionPane.showMessageDialog(null, "The request is already in process", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (workreq.getStatus().equals("Accepted and Completed") || workreq.getStatus().equals("Declined")) {
            JOptionPane.showMessageDialog(null, "Request has been completed earlier", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if ((workreq).getStatus().equals("Pending")) {
            (workreq).setReceiver(useraccount);
            (workreq).setStatus(BloodReqToNewBB.REQUEST_PROGRESS);

            getbloodreqtable();
            JOptionPane.showMessageDialog(null, "The request is now assigned to you! Kindly process it");
        }

    }//GEN-LAST:event_assignbtActionPerformed

    private void backbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbtActionPerformed

        logger.log(Level.INFO, "backJButtonActionPerformed --ClinicianWorkReq");

        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        Clinicianworkareapanel dwjp = (Clinicianworkareapanel) component;
        dwjp.gettable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);

    }//GEN-LAST:event_backbtActionPerformed

    private void declinebtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_declinebtActionPerformed
        // TODO add your handling code here:

        logger.log(Level.INFO, "btnDeclineActionPerformed --ClinicianWorkReq");

        int selectedRow = bloodrequesttable.getSelectedRow();
        int rowCount = bloodrequesttable.getSelectedRowCount();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (rowCount > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        WorkRequest workr = (WorkRequest) bloodrequesttable.getValueAt(selectedRow, 0);
        if (workr.getReceiver().equals(useraccount)) {
            if (workr.getStatus().equals("Pending")) {
                JOptionPane.showMessageDialog(null, "The request has to be assigned first");
            } else if (workr.getStatus().equals("Accepted and Completed") || workr.getStatus().equals("Declined")) {
                JOptionPane.showMessageDialog(null, "The request has been processed earlier");
            } else {
                (workr).setReceiver(useraccount);
                (workr).setStatus(BloodReqToNewBB.REQUEST_REJECT);
                getbloodreqtable();
                JOptionPane.showMessageDialog(null, "The request has been declined due to shortage of blood");

            }
        } else {
            JOptionPane.showMessageDialog(null, "The Request has to be processed by " + workr.getReceiver().getEmpuser().getEmpname());
        }
    }//GEN-LAST:event_declinebtActionPerformed

    private void acceptbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptbtActionPerformed
        // TODO add your handling code here:
        logger.log(Level.INFO, "btnAcceptActionPerformed --ClinicianWorkReq");

        int selectedRow = bloodrequesttable.getSelectedRow();
        int rowCount = bloodrequesttable.getSelectedRowCount();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (rowCount > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (rowCount == 1) {
            WorkRequest wq = (WorkRequest) bloodrequesttable.getValueAt(selectedRow, 0);

            if (wq.getStatus().equals("Pending")) {
                JOptionPane.showMessageDialog(null, "The request has to be assigned first");
            } else if (wq.getStatus().equals("Accepted and Completed") || wq.getStatus().equals("Declined")) {
                JOptionPane.showMessageDialog(null, "The request has been processed earlier");
            } else {
                String reqbloodgrp = ((BloodReqToNewBB) wq).getBloodGroup().getBloodgrp();
                int vailunits = Integer.parseInt(((BloodReqToNewBB) wq).getBloodGroup().getAvailableunits());
                int borrowunits = Integer.parseInt(((BloodReqToNewBB) wq).getReqUnits());
                for (Bloodgroup bloodgrp : this.bloodgrplist.getBloodgrplist()) {
                    if (bloodgrp.getBloodgrp().equals(reqbloodgrp)) {
                        if (Integer.parseInt(bloodgrp.getAvailableunits()) > borrowunits) {
                            String TotalUnits = String.valueOf(vailunits + borrowunits);
                            ((BloodReqToNewBB) wq).getBloodGroup().setAvailableunits(TotalUnits);
                            bloodgrp.setAvailableunits(String.valueOf((Integer.parseInt(bloodgrp.getAvailableunits()) - borrowunits)));
                            JOptionPane.showMessageDialog(null, "Request has been accepted");
                            wq.setStatus(BloodReqToNewBB.REQUEST_ACCEPT);
                            getbloodreqtable();
                            break;
                        } else {
                            JOptionPane.showMessageDialog(null, "Available Blood Units are lesser than the requested units, Please Decline the Request");
                        }
                    }
                }
            }
        }

    }//GEN-LAST:event_acceptbtActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptbt;
    private javax.swing.JButton assignbt;
    private javax.swing.JButton backbt;
    private javax.swing.JTable bloodrequesttable;
    private javax.swing.JButton declinebt;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel manageEnt;
    private javax.swing.JLabel manageEnt1;
    private javax.swing.JLabel manageEnt2;
    private javax.swing.JTable reqtable;
    // End of variables declaration//GEN-END:variables

}
