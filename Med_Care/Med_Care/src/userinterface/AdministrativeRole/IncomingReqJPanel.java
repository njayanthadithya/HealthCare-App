/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.AdministrativeRole;

import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Location.Location;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.Patients.Patient;
import Business.WorkQueue.MessageNurseToHosRequest;
import Business.WorkQueue.WorkRequest;
import static Logger.Logger.logger;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jayanthadithya
 */
public class IncomingReqJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;

    private Enterprise enterprise;

    /**
     * Creates new form IncomingRequest
     */
    public IncomingReqJPanel(JPanel userProcessContainer, Enterprise enterprise) {
       
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        gettable();
    }

    public void gettable() {
        logger.log(Level.INFO, "gettable --IncomingRequest");

        DefaultTableModel requesttable = (DefaultTableModel) patientreqtable.getModel();
        requesttable.setRowCount(0);
        if (enterprise.getWorkqueue().getWorkRequestAList().size() > 0) {
            for (WorkRequest workreq : enterprise.getWorkqueue().getWorkRequestAList()) {

                if (workreq.getClass().getName().contains("MsgfromNurseToHosp")) {
                    if(!((MessageNurseToHosRequest) workreq).getMessage().contains("Transfer") ){
                    Object row[] = new Object[1];
                    row[0] = ((MessageNurseToHosRequest) workreq).getpName();
                    requesttable.addRow(row);
                    }
                }
            }
        }
    }

    public void getcombobox() {
        logger.log(Level.INFO, "getcombobox --IncomingRequest");

        OrganizationDirectory org = enterprise.getOrganizationdirectory();

        for (Organization or : org.getOrganizationAList()) {
            if (or.getOrganzationName().equals("Doctor Organization")) {
                for (Employee u : or.getEmployeedirectory().getEmployeeAList()) {
                    doctorcombobox.addItem(u.toString());
                }
            }
        }
        for (Location location : enterprise.getLocationlist().getLocationAList()) {
            locationcombo.addItem(location.getLocName());
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        patientreqtable = new javax.swing.JTable();
        admitbt = new javax.swing.JButton();
        backbt = new javax.swing.JButton();
        locationlb = new javax.swing.JLabel();
        locationcombo = new javax.swing.JComboBox<>();
        doctorlb = new javax.swing.JLabel();
        doctorcombobox = new javax.swing.JComboBox<>();
        patientlb = new javax.swing.JLabel();
        patientIDtxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        patientreqtable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        patientreqtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(patientreqtable);
        if (patientreqtable.getColumnModel().getColumnCount() > 0) {
            patientreqtable.getColumnModel().getColumn(0).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(167, 117, -1, 183));

        admitbt.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        admitbt.setText("Admit");
        admitbt.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(110, 208, 202)));
        admitbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                admitbtActionPerformed(evt);
            }
        });
        add(admitbt, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 540, 60, 29));

        backbt.setBackground(new java.awt.Color(255, 255, 255));
        backbt.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        backbt.setText("Back");
        backbt.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(110, 208, 202)));
        backbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtActionPerformed(evt);
            }
        });
        add(backbt, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 60, 29));

        locationlb.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        locationlb.setText("Location:");
        add(locationlb, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 490, -1, -1));

        locationcombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Set Location" }));
        add(locationcombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 490, 140, -1));

        doctorlb.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        doctorlb.setText("Doctor:");
        add(doctorlb, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 440, -1, -1));

        doctorcombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Doctor" }));
        add(doctorcombobox, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 440, 140, -1));

        patientlb.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        patientlb.setText("Patient ID:");
        add(patientlb, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 400, -1, -1));
        add(patientIDtxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 400, 146, -1));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Incoming Request");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 790, -1));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imaiges/medicare image 1.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        jLabel1.setMaximumSize(new java.awt.Dimension(1500, 1000));
        jLabel1.setMinimumSize(new java.awt.Dimension(1500, 1000));
        jLabel1.setPreferredSize(new java.awt.Dimension(1500, 1000));
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-560, 0, 1350, 700));
    }// </editor-fold>//GEN-END:initComponents

    private void admitbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_admitbtActionPerformed
        // TODO add your handling code here:
       logger.log(Level.INFO, "admitbtActionPerformed --IncomingRequest");

        if (doctorcombobox.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(userProcessContainer, "Please Choose a Doctor");
            return;
        }
        if (locationcombo.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(userProcessContainer, "Please Choose a Location");
            return;
        }
        if (patientIDtxt.getText().length() == 0) {
            JOptionPane.showMessageDialog(userProcessContainer, "Enter HRN");
            return;
        }
        for (Patient patient : enterprise.getPatientdirectory().getPatientAList()) {
            if (patient.getPatientHRN().equals(patientIDtxt.getText())) {
                JOptionPane.showMessageDialog(userProcessContainer, "HRN already exists, Please re-enter HRN");
                return;
            }
        }
        int selectedRow = patientreqtable.getSelectedRow();
        if (selectedRow >= 0) {
            String patient = patientreqtable.getValueAt(selectedRow, 0).toString();
            String emp = doctorcombobox.getSelectedItem().toString();
            ArrayList<Organization> org = enterprise.getOrganizationdirectory().getOrganizationAList();
            for (Organization o : org) {
            if (o.getOrganzationName().equals("Doctor Organization")) {
            for (Employee e : o.getEmployeedirectory().getEmployeeAList()) {
            if (e.getEmployeeName().equals(emp)) {
                String locs = locationcombo.getSelectedItem().toString();
                for (Location loc : enterprise.getLocationlist().getLocationAList()) {
                if (loc.getLocName().equals(locs)) {
                if (loc.getNurseAList().size() == 0) {
                    JOptionPane.showMessageDialog(userProcessContainer, "Currently nurse is not available in this location");
                    return;
                }
            if (loc.getMax() >= (loc.getCount() + 1)) {
            Patient newPat = enterprise.getPatientdirectory().addPatient();
            newPat.setDoctorName(e);
            newPat.setLocation(loc);
            newPat.setpName(patient);
            newPat.setPatientHRN(patientIDtxt.getText());
            loc.setCount(loc.getCount() + 1);
            JOptionPane.showMessageDialog(userProcessContainer, "In patient Admitted");
            for (WorkRequest workreq : enterprise.getWorkqueue().getWorkRequestAList()) {
            if (workreq.getClass().getName().contains("MsgfromNurseToHospWorkRequest")) {
            if (((MessageNurseToHosRequest) workreq).getpName().equals(patient)) {
            enterprise.getWorkqueue().getWorkRequestAList().remove(workreq);
            break;
           }
            }
            }
                                        
            gettable();

            return;
            } else {
            JOptionPane.showMessageDialog(userProcessContainer, loc.getLocName() + " has reached maximum capacity");
            return;
            }
                }
                }}
            }
            }
            }
               
        } else {
            JOptionPane.showMessageDialog(userProcessContainer, "Please choose a patient");
            return;
        }
    }//GEN-LAST:event_admitbtActionPerformed

    private void backbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbtActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        logger.log(Level.INFO, "backbtActionPerformed --IncomingRequest");
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backbtActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton admitbt;
    private javax.swing.JButton backbt;
    private javax.swing.JComboBox<String> doctorcombobox;
    private javax.swing.JLabel doctorlb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> locationcombo;
    private javax.swing.JLabel locationlb;
    private javax.swing.JTextField patientIDtxt;
    private javax.swing.JLabel patientlb;
    private javax.swing.JTable patientreqtable;
    // End of variables declaration//GEN-END:variables
}
