/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Emergency.Emergencynurse;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.ECareManagerOganization;
import Business.Organization.ECareOrganization;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.BloodReqToBloodBankfromEmg;
import Business.WorkQueue.EmgNurseRequest;
import Business.WorkQueue.CCarerequestToCCarefromEMS;
import Business.WorkQueue.TransportRequest;
import Business.WorkQueue.WorkRequest;
import static Logger.Logger.logger;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.time.LocalDateTime;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.Emergency.Emergencynurse.ProcessEmgNurseWorkReqJPanel;

/**
 *
 * @author ksahi
 */
public class EmgNurseWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form EMSNurseWorkAreaKJPanel
     */
    private JPanel userProcessContainer;
    private OrganizationDirectory organizationdirectory;
    private Organization organization;
    private Enterprise enterprise;
    private UserAccount useraccount;
    private EcoSystem ecosystem;

    public EmgNurseWorkAreaJPanel(JPanel userProcessContainer, UserAccount useraccount, Organization organization, Enterprise enterprise, EcoSystem ecosystem) {
        logger.log(Level.INFO, "EMSNurseWorkAreaJPanel");

        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.organizationdirectory = enterprise.getOrganizationdirectory();
        this.enterprise = enterprise;
        this.useraccount = useraccount;
        this.ecosystem = ecosystem;
        valueLabel.setText(enterprise.getOrganzationName());
        gettable();
        gettableBB();
        gettableOB();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        erlb = new javax.swing.JLabel();
        enterpriseLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        refreshJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        nursetable = new javax.swing.JTable();
        assignbt = new javax.swing.JButton();
        btnProcess = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        nursereqBB = new javax.swing.JTable();
        manageEnt1 = new javax.swing.JLabel();
        manageEnt2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        nursereqOB = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        erlb.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        erlb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        erlb.setText("NURSE EMERGENCY REQUESTS");
        erlb.setToolTipText("");
        add(erlb, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 850, -1));

        enterpriseLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        enterpriseLabel.setText("EnterPrise :");
        add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 50, 127, 30));

        valueLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        valueLabel.setText("<value>");
        add(valueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 50, 90, 26));

        refreshJButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        refreshJButton.setText("Refresh");
        refreshJButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(110, 208, 202)));
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 61, 100, 40));

        nursetable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Message", "Request DateTime", "Raised by", "Assigned to", "Status"
            }
        ));
        jScrollPane1.setViewportView(nursetable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 116, 820, 185));

        assignbt.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        assignbt.setText("Assign to me ");
        assignbt.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(110, 208, 202)));
        assignbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignbtActionPerformed(evt);
            }
        });
        add(assignbt, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, 90, 40));

        btnProcess.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnProcess.setText("WorkArea");
        btnProcess.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(110, 208, 202)));
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });
        add(btnProcess, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 310, 120, 40));

        nursereqBB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Requested Nurse", "Patient Name", "Blood Group", "Required Units", "Requested Status"
            }
        ));
        jScrollPane2.setViewportView(nursereqBB);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 392, 820, 120));

        manageEnt1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        manageEnt1.setText("NURSE REQUESTS TO BLOODBANK");
        add(manageEnt1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 360, -1, -1));

        manageEnt2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        manageEnt2.setText("NURSE REQUESTS TO ORGANBANK");
        add(manageEnt2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 560, -1, -1));

        nursereqOB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Requested Nurse", "Patient Name", "Organ Type", "Required Units", "Requested Status"
            }
        ));
        jScrollPane3.setViewportView(nursereqOB);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 590, 820, 120));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imaiges/medicare image 1.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        jLabel1.setMaximumSize(new java.awt.Dimension(1500, 1000));
        jLabel1.setMinimumSize(new java.awt.Dimension(1500, 1000));
        jLabel1.setPreferredSize(new java.awt.Dimension(1500, 1000));
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 920, -1));
    }// </editor-fold>//GEN-END:initComponents



    void gettable() {
        logger.log(Level.INFO, "gettable --EMSNurseWorkAreaJPanel");

        DefaultTableModel mod = (DefaultTableModel) nursetable.getModel();
        mod.setRowCount(0);

        if (!organization.getWorkqueue().getWorkRequestAList().isEmpty()) {
            for (WorkRequest workre : organization.getWorkqueue().getWorkRequestAList()) {
                if (workre.getClass().getName().contains("EMSNurseWorkRequest")) {

                    Object row[] = new Object[6];
                    row[0] = ((EmgNurseRequest) workre);
                    row[1] = ((EmgNurseRequest) workre).getMessage();
                    row[2] = ((EmgNurseRequest) workre).getTime();
                    row[3] = ((EmgNurseRequest) workre).getIssuer().getEmployeeUser().getEmployeeName();
                    try {
                        row[4] = ((EmgNurseRequest) workre).getReceipient().getEmployeeUser().getEmployeeName();
                    } catch (NullPointerException e) {
                        row[4] = "No assignee yet";
                    }
                    row[5] = ((EmgNurseRequest) workre).getTaskStatus();

                    mod.addRow(row);
                }
            }
        }
    }

    void gettableBB() {
        logger.log(Level.INFO, "gettableBB --EMSNurseWorkAreaJPanel");

        DefaultTableModel mod = (DefaultTableModel) nursereqBB.getModel();
        mod.setRowCount(0);

        for (WorkRequest wr : useraccount.getWorkqueue().getWorkRequestAList()) {
            if (wr.getClass().getName().contains("BloodrequestToBBfromEMS")) {
                Object row[] = new Object[5];

                row[0] = ((BloodReqToBloodBankfromEmg) wr).getIssuer();
                row[1] = ((BloodReqToBloodBankfromEmg) wr).getpName();
                row[2] = ((BloodReqToBloodBankfromEmg) wr).getBloodGroup();
                row[3] = ((BloodReqToBloodBankfromEmg) wr).getRequestedUnits();
                row[4] = ((BloodReqToBloodBankfromEmg) wr).getTaskStatus();
                mod.addRow(row);
            }
        }
    }
    
    void gettableOB() {
        
        logger.log(Level.INFO, "gettableOB --EMSNurseWorkAreaJPanel");
        DefaultTableModel mod = (DefaultTableModel) nursereqOB.getModel();
        mod.setRowCount(0);

        for (WorkRequest wr : useraccount.getWorkqueue().getWorkRequestAList()) {
            if (wr.getClass().getName().contains("OrganrequestToOBfromEMS")) {
                Object row[] = new Object[5];

                row[0] = ((CCarerequestToCCarefromEMS) wr).getIssuer();
                row[1] = ((CCarerequestToCCarefromEMS) wr).getpName();
                row[2] = ((CCarerequestToCCarefromEMS) wr).getCCareType();
                row[3] = ((CCarerequestToCCarefromEMS) wr).getReqUnits();
                row[4] = ((CCarerequestToCCarefromEMS) wr).getTaskStatus();
                mod.addRow(row);
            }
        }
    }

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        // populatetransportRequestTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void assignbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignbtActionPerformed
        logger.log(Level.INFO, "assignbtActionPerformed --EMSNurseWorkAreaJPanel");

        int selectedRow = nursetable.getSelectedRow();
        int rowCount = nursetable.getSelectedRowCount();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (rowCount > 1) {
            JOptionPane.showMessageDialog(null, "Please select only one row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        WorkRequest workre = (WorkRequest) nursetable.getValueAt(selectedRow, 0);
      
        if (workre.getTaskStatus().equals("Completed")) {
            JOptionPane.showMessageDialog(null, "Request has been processed earlier", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (workre.getReceipient() != null) {
            JOptionPane.showMessageDialog(null, "Request has been processed earlier or already in-progress!", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        for (WorkRequest wr : organization.getWorkqueue().getWorkRequestAList()) {
            if (wr.getClass().getName().contains("EMSNurseWorkRequest")) {
                if (!wr.getTaskStatus().isEmpty() && wr.getTaskStatus().equals("In Progress") && wr.getReceipient().equals(useraccount)) {
                    JOptionPane.showMessageDialog(null, "please complete earlier task", "warning", JOptionPane.WARNING_MESSAGE);
                    return;
                }

            }
        }

        if (workre.getTaskStatus().equals("Pending")) {
            workre.setReceipient(useraccount);
            workre.setTaskStatus(EmgNurseRequest.RequestPROCESSING);
            workre.setTime(LocalDateTime.now());
            gettable();
            JOptionPane.showMessageDialog(null, "The request is now assigned to you! Kindly process it");
        }
    }//GEN-LAST:event_assignbtActionPerformed

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        logger.log(Level.INFO, "btnProcessActionPerformed --EMSNurseWorkAreaJPanel");
        int selectedRow = nursetable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        EmgNurseRequest nurse = (EmgNurseRequest) nursetable.getValueAt(selectedRow, 0);
        if (nurse.getTaskStatus().equalsIgnoreCase("Completed") && !nurse.getReceipient().equals(useraccount)) {
            JOptionPane.showMessageDialog(null, "Request has been processed earlier", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (nurse.getTaskStatus().equals("Completed")) {
            JOptionPane.showMessageDialog(null, "Request has been processed earlier", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (nurse.getReceipient() == null) {
            JOptionPane.showMessageDialog(null, "Please assign the request first", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (nurse.getTaskStatus().equals("Pending")) {
            JOptionPane.showMessageDialog(null, "Please assign and process the request", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (nurse.getTaskStatus().equalsIgnoreCase("In Progress") || nurse.getTaskStatus().equalsIgnoreCase("Completed")) {
            if (nurse.getReceipient() != useraccount) {
                JOptionPane.showMessageDialog(null, "Request has been processed earlier!", "warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            nurse.setTaskStatus(EmgNurseRequest.RequestPROCESSING);
            nurse.setTime(LocalDateTime.now());
            nurse.setReceipient(useraccount);
            ProcessEmgNurseWorkReqJPanel nursewr = new ProcessEmgNurseWorkReqJPanel(userProcessContainer, useraccount, nurse, ecosystem, enterprise);
            userProcessContainer.add("ProcessEMSNurseWorkRequestJPanel", nursewr);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
    }//GEN-LAST:event_btnProcessActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignbt;
    private javax.swing.JButton btnProcess;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel erlb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel manageEnt1;
    private javax.swing.JLabel manageEnt2;
    private javax.swing.JTable nursereqBB;
    private javax.swing.JTable nursereqOB;
    private javax.swing.JTable nursetable;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables

}
