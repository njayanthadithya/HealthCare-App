/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.BloodBank;

import Business.BloodGroup.BloodGroup;
import Business.BloodGroup.Bloodgrouplist;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.PhysicianOrganization;
import Business.Organization.DoctorOrganization;
import Business.Organization.LabOrganization;
import Business.Organization.ManagerOrganization;
import Business.Organization.Organization;
import Business.Roles.LabPhysicianRole;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.BloodReqToNewBloodBank;
import Business.WorkQueue.BloodReqToBloodBankfromEmg;
import Business.WorkQueue.BloodReqToBloodBankfromHos;
import Business.WorkQueue.LabTestRequest;
import Business.WorkQueue.WorkRequest;
import static Logger.Logger.logger;
import java.awt.BorderLayout;
import java.awt.Color;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map.Entry;
import java.util.logging.Level;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Rutvi Patel
 */
public class Managerworkareapanel extends javax.swing.JPanel {

    /**
     * Creates new form ManagerRoleWorkArea
     */
    private JPanel userProcessContainer;
    private ManagerOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private PhysicianOrganization co;
    private List<Entry<String, Integer>> topBloodUnits;
    private List<Entry<String, Integer>> topRequests;
    private BloodGroup bloodgroup;
    private Bloodgrouplist bloodgrouplist;
    private EcoSystem ecosystem;

    public Managerworkareapanel(JPanel userProcessContainer, UserAccount account, ManagerOrganization organization, Enterprise enterprise, EcoSystem ecosystem) {
        logger.log(Level.INFO, "Managerroleworkareapanel");

        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        //valueLabel.setText(enterprise.getName());

        this.ecosystem = ecosystem;
        //populateRequestTable();
        getPieChartData();
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        top3ReqBlood = new javax.swing.JButton();
        piechartpanel = new javax.swing.JPanel();
        manageEnt1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        top3ReqBlood.setText("View top 3 Requested Blood Groups");
        top3ReqBlood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                top3ReqBloodActionPerformed(evt);
            }
        });

        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        piechartpanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        add(piechartpanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(261, 134, -1, -1));

        manageEnt1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        manageEnt1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        manageEnt1.setText("MANAGER WORK AREA");
        add(manageEnt1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-1, 19, 690, -1));

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton1.setText("Top 3 Requested Blood units");
        jButton1.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(110, 208, 202)));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, 190, 29));
    }// </editor-fold>//GEN-END:initComponents
//
    private void top3ReqBloodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_top3ReqBloodActionPerformed

    }//GEN-LAST:event_top3ReqBloodActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        logger.log(Level.INFO, "jButton1ActionPerformed --ManagerRoleWorkAreaJPanel");

        FindTop3BloodUnits();

    }//GEN-LAST:event_jButton1ActionPerformed
      public void getPieChartData() {
        logger.log(Level.INFO, "populatePieChartData --ManagerRoleWorkAreaJPanel");

        DefaultPieDataset dataSet = new DefaultPieDataset();
        int OPositive = 0;
        int ONegative = 0;
        int APositive = 0;
        int ANegative = 0;
        int ABPositive = 0;
        int ABNegative = 0;
        int BPositive = 0;
        int BNegative = 0;
        try {

            for (BloodGroup bg : enterprise.getBloodgrouplist().getBloodGroupAList()) {
                if (bg.getBloodGroup().equalsIgnoreCase("O+")) {
                    OPositive = Integer.parseInt(bg.getAvailUnits());
                } else if (bg.getBloodGroup().equalsIgnoreCase("O-")) {
                    ONegative = Integer.parseInt(bg.getAvailUnits());
                } else if (bg.getBloodGroup().equalsIgnoreCase("A+")) {
                    APositive = Integer.parseInt(bg.getAvailUnits());
                } else if (bg.getBloodGroup().equalsIgnoreCase("A-")) {
                    ANegative = Integer.parseInt(bg.getAvailUnits());
                } else if (bg.getBloodGroup().equalsIgnoreCase("B+")) {
                    BPositive = Integer.parseInt(bg.getAvailUnits());
                } else if (bg.getBloodGroup().equalsIgnoreCase("B-")) {
                    BNegative = Integer.parseInt(bg.getAvailUnits());
                } else if (bg.getBloodGroup().equalsIgnoreCase("AB-")) {
                    ABNegative = Integer.parseInt(bg.getAvailUnits());
                } else if (bg.getBloodGroup().equalsIgnoreCase("AB+")) {
                    ABPositive = Integer.parseInt(bg.getAvailUnits());
                }
            }

            dataSet.setValue("O+", OPositive);
            dataSet.setValue("O-", ONegative);
            dataSet.setValue("A+", APositive);
            dataSet.setValue("A-", ANegative);
            dataSet.setValue("B+", BPositive);
            dataSet.setValue("B-", BNegative);
            dataSet.setValue("AB+", ABPositive);
            dataSet.setValue("AB-", ABNegative);

            JFreeChart chart = ChartFactory.createPieChart3D("Pie Chart for Available BloodUnits", dataSet, true, true, Locale.ENGLISH);
            chart.setBackgroundPaint(Color.WHITE);
            chart.getTitle().setPaint(Color.BLUE);
            ChartPanel chartpanel = new ChartPanel(chart);
            chartpanel.setDomainZoomable(true);

            piechartpanel.setLayout(new BorderLayout());
            piechartpanel.add(chartpanel, BorderLayout.EAST);
            piechartpanel.setVisible(true);
        } catch (NullPointerException npe) {
            JOptionPane.showMessageDialog(null, " No Data to display as of now!", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

    }
      
public void FindTop3BloodUnits() {
        logger.log(Level.INFO, "findTop3BloodRequest --ManagerRoleWorkAreaJPanel");

        int quantity = 0;
        String bg = "";
        HashMap<String, Integer> volMap = new HashMap<>();
        try {
            for (Network network : ecosystem.getNetworkList()) {
                if (enterprise.equals(this.enterprise)) {
                    for (Organization org : enterprise.getOrganizationdirectory().getOrganizationAList()){
                    if (org instanceof PhysicianOrganization) {
                            for (WorkRequest request : org.getWorkqueue().getWorkRequestAList()) {

                                if (request.getClass().getName().contains("BloodReqToNewBB")) {
                                    quantity = Integer.parseInt(((BloodReqToNewBloodBank) request).getRequestedUnits());
                                    bg = ((BloodReqToNewBloodBank) request).getbType();
                                    if (volMap.containsKey(bg)) {
                                        volMap.put(bg, volMap.get(bg) + quantity);
                                    } else {
                                        volMap.put(bg, quantity);
                                    }
                                }
                            }
                    }
                    }
                    for (Organization org : enterprise.getOrganizationdirectory().getOrganizationAList()) {
                        
                        if (org instanceof LabOrganization) {
                            for (WorkRequest request : org.getWorkqueue().getWorkRequestAList()) {

                                if(request.getClass().getName().contains("LabTestWorkRequest")) {
                                    quantity = Integer.parseInt(((LabTestRequest) request).getBloodBagUnits());
                                    bg = ((LabTestRequest) request).getbType();
                                    if (volMap.containsKey(bg)) {
                                        volMap.put(bg, volMap.get(bg) + quantity);
                                    } else {
                                        volMap.put(bg, quantity);
                                    }
                                }
                                
                            }
                        }

                    }
                    for (WorkRequest request : enterprise.getWorkqueue().getWorkRequestAList()) {

                        if (request.getClass().getName().contains("BloodrequestToBBfromHospital")) {
                            quantity = (((BloodReqToBloodBankfromHos) request).getRequestedUnits());
                            bg = ((BloodReqToBloodBankfromHos) request).getPatient().getBloodGroup();
                            if (volMap.containsKey(bg)) {
                                volMap.put(bg, volMap.get(bg) + quantity);
                            } else {
                                volMap.put(bg, quantity);
                            }
                        } else if (request.getClass().getName().contains("BloodrequestToBBfromEMS")) {
                            quantity = Integer.parseInt(((BloodReqToBloodBankfromEmg) request).getRequestedUnits());
                            bg = ((BloodReqToBloodBankfromEmg) request).getBloodGroup();
                            if (volMap.containsKey(bg)) {
                                volMap.put(bg, volMap.get(bg) + quantity);
                            } else {
                                volMap.put(bg, quantity);
                            }
                        }
                    }
                }
                System.out.println("volMap>>" + volMap.toString());

                List<Entry<String, Integer>> list = new LinkedList<>(volMap.entrySet());

                Collections.sort(list, new Comparator<Entry<String, Integer>>() {
                    public int compare(Entry<String, Integer> o1,
                            Entry<String, Integer> o2) {
                        if (o1.getValue() > o2.getValue()) {
                            return 1;
                        } else if (o1.getValue() < o2.getValue()) {
                            return -1;
                        }
                        return 0;
                    }

                });
                Collections.reverse(list);
                System.out.println("After Sort " + list.toString());

                topBloodUnits = list;

                DefaultCategoryDataset dataSet = new DefaultCategoryDataset();
                int count = 0;

                if (volMap.entrySet().size() <= 3) {
                    for (Entry<String, Integer> entry : list) {
                        System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());
                        dataSet.setValue(entry.getValue(), "No of Blood Units", entry.getKey());
                    }
                } else if (volMap.entrySet().size() > 3) {
                    for (Entry<String, Integer> entry : list) {
                        System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());
                        dataSet.setValue(entry.getValue(), "No of Blood Units", entry.getKey());
                        count++;
                        if (count == 3) {
                            break;
                        }
                    }
                }
            //JFreeChart piechart1 = ChartFactory.createPieChart(" Top 3 BloodGroups based on Required Units ", dataSet, false, true, false);
                JFreeChart piechart = ChartFactory.createBarChart(" Top 3 BloodGroups based on Required Units ", " BloodGroup", "Quantity", dataSet, PlotOrientation.VERTICAL, false, true, false);
                piechart.setBackgroundPaint(Color.WHITE);
                piechart.getTitle().setPaint(Color.BLUE);
                CategoryPlot plot = piechart.getCategoryPlot();
                plot.setBackgroundPaint(Color.CYAN);

                ChartFrame frame = new ChartFrame("Bar Chart for Top 3 Blood Units ", piechart);
                frame.setVisible(true);
                Dimension ss = Toolkit.getDefaultToolkit().getScreenSize();
                Dimension frameSize = new Dimension(500, 300);

                frame.setBounds(ss.width / 2 - frameSize.width / 2,
                        ss.height / 2 - frameSize.height / 2,
                        frameSize.width, frameSize.height);

            }
        } catch (NullPointerException npe) {
            npe.printStackTrace();
            JOptionPane.showMessageDialog(null, " No Data to display as of now!", "warning", JOptionPane.WARNING_MESSAGE);
            return;

        }

    }
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel manageEnt1;
    private javax.swing.JPanel piechartpanel;
    private javax.swing.JButton top3ReqBlood;
    // End of variables declaration//GEN-END:variables
}
