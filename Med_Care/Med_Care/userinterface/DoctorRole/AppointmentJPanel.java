/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DoctorRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Location.Location;
import Business.Medicine.Medicine;
import Business.Medicine.MedicineAdministration;
import Business.Network.Network;
import Business.Organization.Nurseorganization;
import Business.Organization.Organization;
import Business.Patients.Patient;
import Business.UserAccount.Useraccount;
import Business.WorkQueue.BloodrequestToBBfromHospital;
import Business.WorkQueue.DischargeReqtoNurse;
import Business.WorkQueue.WorkRequest;
import static Logger.Logger.logger;
import java.awt.CardLayout;
import java.time.LocalDateTime;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.AdministrativeRole.TransferReqpanel;

/**
 *
 * @author Lokesh Balaji
 */
public class AppointmentJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AppointmentJPanel
     */
    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private Useraccount userAccount;
    private EcoSystem ecosystem;

    public AppointmentJPanel(JPanel userProcessContainer, Enterprise enterprise, Useraccount userAccount, EcoSystem ecosystem) {
       initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        this.ecosystem = ecosystem;
        
        populateTable();
        populateDischargeReq();
        populatebloodReq();
        populateComboBox();
        populateTranReq();
        populateBB();
    }
    
   
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        patientJTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        patientJTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        medicationbt = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        Transferbt = new javax.swing.JButton();
        transferHospital = new javax.swing.JComboBox<>();
        dischargebt = new javax.swing.JButton();
        bloodBanks = new javax.swing.JComboBox<>();
        reqbloodbt = new javax.swing.JButton();
        backbt = new javax.swing.JButton();

        patientJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Patinet Name", "Patient HRN", "Locations"
            }
        ));
        jScrollPane1.setViewportView(patientJTable);

        patientJTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Patient Name", "Status"
            }
        ));
        jScrollPane2.setViewportView(patientJTable1);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Patient", "Discharge Status"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Patient", "Blood", "Units", "Status"
            }
        ));
        jScrollPane4.setViewportView(jTable2);

        medicationbt.setText("Medication");
        medicationbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medicationbtActionPerformed(evt);
            }
        });

        jButton2.setText("Add Allergy");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Transferbt.setText("Transfer");
        Transferbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransferbtActionPerformed(evt);
            }
        });

        transferHospital.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        dischargebt.setText("Discharge");
        dischargebt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dischargebtActionPerformed(evt);
            }
        });

        bloodBanks.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        reqbloodbt.setText("Request Blood");
        reqbloodbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reqbloodbtActionPerformed(evt);
            }
        });

        backbt.setText("Back");
        backbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(medicationbt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 171, Short.MAX_VALUE)
                        .addComponent(jButton2))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(dischargebt)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addComponent(backbt)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(transferHospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Transferbt)
                        .addGap(93, 93, 93))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(bloodBanks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(61, 61, 61)
                            .addComponent(reqbloodbt))
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(medicationbt)
                    .addComponent(jButton2)
                    .addComponent(Transferbt)
                    .addComponent(transferHospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(85, 85, 85)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dischargebt)
                    .addComponent(bloodBanks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reqbloodbt))
                .addGap(44, 44, 44)
                .addComponent(backbt)
                .addContainerGap(86, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbtActionPerformed
       logger.log(Level.INFO, "btnBackActionPerformed --ApppointmentJPanel");

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backbtActionPerformed

    private void medicationbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medicationbtActionPerformed
       
         logger.log(Level.INFO, "btnPrescribeActionPerformed --ApppointmentJPanel");

        int selectedRow = patientJTable.getSelectedRow();
        if (selectedRow >= 0) {
            Patient patient = (Patient) patientJTable.getValueAt(selectedRow, 0);
            prescribeJPanel prescribeJPanel = new prescribeJPanel(userProcessContainer, patient, enterprise);
            userProcessContainer.add("prescribeJPanel", prescribeJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        } else {
            JOptionPane.showMessageDialog(userProcessContainer, "Please select a patient");
        }
    }//GEN-LAST:event_medicationbtActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         logger.log(Level.INFO, "btnAllergyActionPerformed --ApppointmentJPanel");

        int selectedRow = patientJTable.getSelectedRow();
        if (selectedRow >= 0) {
            Patient patient = (Patient) patientJTable.getValueAt(selectedRow, 0);
            AllergyJPanel allergyJPanel = new AllergyJPanel(userProcessContainer, patient);
            userProcessContainer.add("allergyJPanel", allergyJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        } else {
            JOptionPane.showMessageDialog(userProcessContainer, "Please select a patient");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void TransferbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TransferbtActionPerformed
        logger.log(Level.INFO, "jButton3ActionPerformed --ApppointmentJPanel");

        if (transferHospital.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(userProcessContainer, "Please select the hospital you like to transfer the patient");
            return;
        }

        int selectedRow = patientJTable.getSelectedRow();
        if (selectedRow >= 0) {
            Patient patient = (Patient) patientJTable.getValueAt(selectedRow, 0);
            for (Network network : ecosystem.getNetworkList()) {
                for (Enterprise enterprise : network.getEnterprisedirectory().getEnterpriselist()) {
                    if (enterprise.getEnterprisetype() == Enterprise.EnterpriseType.EmergencyCare) {
                        Business.WorkQueue.TransferRequest transfer = new Business.WorkQueue.TransferRequest();
                        Patient tranpatient = new Patient();
                        tranpatient.setAllergies(patient.getAllergies());
                        tranpatient.setBloodGroup(patient.getBloodGroup());
                        tranpatient.setDoctor(null);
                        tranpatient.setIsDischarged(false);

                        Location location = patient.getLocation();
                        location.setCount(location.getCount() - 1);

                        tranpatient.setLocation(null);
                        tranpatient.setMedList(patient.getMedList());
                        tranpatient.setPatientName(patient.getPatientName());
                        this.enterprise.getPatientdirectory().getPatientList().remove(patient);
                        transfer.setPatient(tranpatient);

                        for (Network networkcombo : ecosystem.getNetworkList()) {
                            for (Enterprise enterprisecombo : networkcombo.getEnterprisedirectory().getEnterpriselist()) {
                                if (enterprisecombo.getEnterprisetype() == Enterprise.EnterpriseType.Hospital
                                        && enterprisecombo.getName().equals(transferHospital.getSelectedItem())) {
                                    transfer.setEnterprise(enterprisecombo);
                                    break;
                                }
                            }
                        }
                        transfer.setSenderEnterprise(this.enterprise);
                        transfer.setStatus("0");
                        transfer.setTime(LocalDateTime.now());
                        enterprise.getWorkqueue().getWorkrequestlist().add(transfer);
                        userAccount.getWorkqueue().getWorkrequestlist().add(transfer);
                        JOptionPane.showMessageDialog(userProcessContainer, "Patient transfer Requested");
                        populateTranReq();
                        populateTable();
                        return;
                    }
                }
            }

        }
    }//GEN-LAST:event_TransferbtActionPerformed

    private void dischargebtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dischargebtActionPerformed
        logger.log(Level.INFO, "jButton2ActionPerformed --ApppointmentJPanel");

        int selectedRow = patientJTable.getSelectedRow();
        if (selectedRow >= 0) {
            Patient patient = (Patient) patientJTable.getValueAt(selectedRow, 0);
            for (Medicine med : patient.getMedList().getMedicationlist()) {
                if (!med.isIsdiscontiued()) {
                    for (MedicineAdministration medAdmin : med.getMedicineadmin()) {
                        if (!medAdmin.getIsadminis()) {
                            JOptionPane.showMessageDialog(userProcessContainer, "Patient has medications which has not been administered."
                                    + "Please Administer before discharge");
                            return;
                        }
                    }
                }
            }

            //for (WorkRequest req : userAccount.getWorkQueue().getWorkRequestList()) {
            //    if (req.getClass().getName().contains("DischargeReqtoNurse")) {
            //        if (((DischargeReqtoNurse) req).getPatient().getPatientHRN().equals(patient.getPatientHRN())) {
            //            JOptionPane.showMessageDialog(userProcessContainer, "Request has already been raised.");
            //            return;
            //        }
            //    }
            //}

            DischargeReqtoNurse request = new DischargeReqtoNurse(patient);
            request.setStatus("0");
            Organization org = null;
            for (Organization organization : enterprise.getOrganizationdirectory().getOrglist()) {
                if (organization instanceof Nurseorganization) {
                    org = organization;
                    break;
                }
            }
            if (org != null) {
                org.getWorkqueue().getWorkrequestlist().add(request);
                userAccount.getWorkqueue().getWorkrequestlist().add(request);
            }
            JOptionPane.showMessageDialog(userProcessContainer, "patient Discharge Requested to Nurse");


            populateTable();
            populateDischargeReq();
            return;
        }
    }//GEN-LAST:event_dischargebtActionPerformed

    private void reqbloodbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reqbloodbtActionPerformed
        logger.log(Level.INFO, "jButton1ActionPerformed --ApppointmentJPanel");

        if (bloodBanks.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(userProcessContainer, "Please select the BloodBank you like to request the blood");
            return;
        }

        int selectedRow = patientJTable.getSelectedRow();
        if (selectedRow >= 0) {
            Patient patient = (Patient) patientJTable.getValueAt(selectedRow, 0);
            for (Network network : ecosystem.getNetworkList()) {
                for (Enterprise enterprise : network.getEnterprisedirectory().getEnterpriselist()) {
                    if (enterprise.getEnterprisetype() == Enterprise.EnterpriseType.BloodBank
                            && enterprise.getName().equals(bloodBanks.getSelectedItem())) {
                        BloodrequestToBBfromHospital reqtoBB = new BloodrequestToBBfromHospital();
                        try {
                            int reqUnits = Integer.parseInt(JOptionPane.showInputDialog(userProcessContainer, "Req Units"));
                            if (reqUnits >= 5 || reqUnits <= 0) {
                                JOptionPane.showMessageDialog(userProcessContainer, "Please enter a valid unit");
                                return;
                            } else {
                                reqtoBB.setReqUnits(reqUnits);
                            }
                            reqtoBB.setStatus("0");
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(userProcessContainer, "Please enter a valid integer");
                            return;
                        }
                        reqtoBB.setPatient(patient);
                        reqtoBB.setSenderEnterprise(this.enterprise);
                        enterprise.getWorkqueue().getWorkrequestlist().add(reqtoBB);
                        userAccount.getWorkqueue().getWorkrequestlist().add(reqtoBB);
                        populatebloodReq();
                        return;
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(userProcessContainer, "Please select a patient");
        }

    }//GEN-LAST:event_reqbloodbtActionPerformed
    
    public void populateBB() {
        logger.log(Level.INFO, "populateBB --ApppointmentJPanel");

        for (Network net : ecosystem.getNetworkList()) {
            for (Enterprise enterprise : net.getEnterprisedirectory().getEnterpriselist()) {
                if (enterprise.getEnterprisetype() == Enterprise.EnterpriseType.BloodBank) {
                    bloodBanks.addItem(enterprise.getName());
                }
            }
        }
    }
    
     public void populateComboBox() {
        logger.log(Level.INFO, "populateComboBox --ApppointmentJPanel");

        for (Network net : ecosystem.getNetworkList()) {
            for (Enterprise enterprise : net.getEnterprisedirectory().getEnterpriselist()) {
                if (!enterprise.getName().equals(this.enterprise.getName())
                        && enterprise.getEnterprisetype() == Enterprise.EnterpriseType.Hospital) {
                    transferHospital.addItem(enterprise.getName());
                }
            }
        }
    }
     
      public void populateTable() {
        logger.log(Level.INFO, "populateTable --ApppointmentJPanel");

        int flag = 0;
        DefaultTableModel model = (DefaultTableModel) patientJTable.getModel();
        model.setRowCount(0);
        for (Patient patient : enterprise.getPatientdirectory().getPatientList()) {
            if (patient.getDoctor() != null) {
                if (patient.getDoctor().getEmpname() == userAccount.getEmpuser().getEmpname()) {
                    if (!patient.isIsDischarged()) {
                        for (WorkRequest req : userAccount.getWorkqueue().getWorkrequestlist()) {
                            if (req.getClass().getName().contains("DischargeReqtoNurse")) {
                                if (((DischargeReqtoNurse) req).getPatient().getPatientHRN().equals(patient.getPatientHRN())
                                        && req.getStatus().equals("0")) {
                                    flag = 1;
                                    break;
                                }
                            }
                        }
                        if (flag == 0) {
                            Object[] row = new Object[3];
                            row[0] = patient;
                            row[1] = patient.getPatientHRN();
                            row[2] = patient.getLocation().getLocationname();
                            model.addRow(row);
                        }
                        flag = 0;
                    }
                }
            }
        }
    }
 public void populatebloodReq() {
        logger.log(Level.INFO, "populatebloodReq --ApppointmentJPanel");

        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        for (WorkRequest req : userAccount.getWorkqueue().getWorkrequestlist()) {
            if (req.getClass().getName().contains("BloodrequestToBBfromHospital")) {
                Object[] row = new Object[4];
                row[0] = ((BloodrequestToBBfromHospital) req).getPatient();
                row[1] = ((BloodrequestToBBfromHospital) req).getPatient().getBloodGroup();
                row[2] = ((BloodrequestToBBfromHospital) req).getReqUnits();
                if (req.getStatus().equals("0")) {
                    row[3] = "Requested";
                } else if (req.getStatus().equals("1")) {
                    row[3] = "In Progress";
                } else if (req.getStatus().equals("2")) {
                    row[3] = "Decline";
                } else if (req.getStatus().equals("3")) {
                    row[3] = "Completed";
                }
                model.addRow(row);

            }
        }
    }
 
    public void populateTranReq() {
        logger.log(Level.INFO, "populateTranReq --ApppointmentJPanel");

        DefaultTableModel model = (DefaultTableModel) patientJTable1.getModel();
        model.setRowCount(0);

        for (WorkRequest req : userAccount.getWorkqueue().getWorkrequestlist()) {
            if (req.getClass().getName().contains("TransferRequest")) {
                Object[] row = new Object[3];
                 row[0] = ((Business.WorkQueue.TransferRequest) req).getPatient();

                if (req.getStatus().equals("0")) {
                    row[1] = "Requested";
                } else if (req.getStatus().equals("1")) {
                    row[1] = "In Progress";
                } else if (req.getStatus().equals("3")) {
                    row[1] = "Ambulance";
                } else if (req.getStatus().equals("4")) {
                    row[1] = "Transferred";
                }
                model.addRow(row);
            }
        }
    }
    
    public void populateDischargeReq() {
        logger.log(Level.INFO, "populateDischargeReq --ApppointmentJPanel");

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        for (WorkRequest req : userAccount.getWorkqueue().getWorkrequestlist()) {
            if (req.getClass().getName().contains("DischargeReqtoNurse")) {
                Object[] row = new Object[2];
                row[0] = ((DischargeReqtoNurse) req).getPatientname();
                if (req.getStatus().equals("0")) {
                    row[1] = "In process with nurse";
                } else if (req.getStatus().equals("1")) {
                    row[1] = "Discharged";
                }
                model.addRow(row);
            }

        }
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Transferbt;
    private javax.swing.JButton backbt;
    private javax.swing.JComboBox<String> bloodBanks;
    private javax.swing.JButton dischargebt;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JButton medicationbt;
    private javax.swing.JTable patientJTable;
    private javax.swing.JTable patientJTable1;
    private javax.swing.JButton reqbloodbt;
    private javax.swing.JComboBox<String> transferHospital;
    // End of variables declaration//GEN-END:variables
}
